<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>Sistema Rollback</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../../assets/css/default.css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Details for Rollback Multiplayer" />
  <meta name="template" content="../../../assets/masterpages/Manual_Page.htt" />
  <meta name="condition-tags" content="Export:Beta" />
</head>
<body>
  <h1>Sistema Rollback</h1>
  <p>Depois de seguir o tutorial <a data-xref="{title}" href="Creating_Multiplayer.htm">Criar um Jogo Multiplayer</a>, você pode ter algumas perguntas sobre como o sistema Rollback funciona. Esta página tem como objetivo expandir o sistema.</p>
  <h2>O que é Rollback?</h2>
  <p>É fácil experimentar o atraso ao jogar on-line. Se você estiver jogando com alguém remotamente, pode levar uma fração de segundo para que a entrada deles chegue até você, mas mesmo isso pode ser suficiente para arruinar sua experiência de jogo.</p>
  <p>O Rollback utiliza previsões para reduzir o efeito do atraso. Com base em dados anteriores, ele prevê o que o outro usuário vai fazer a seguir e mostra o resultado dessa previsão, que é instantânea.</p>
  <p>Quando a previsão está correta, você não experimenta atraso e seu jogo se sente muito mais responsivo.</p>
  <p>Entretanto, às vezes o sistema percebe que sua previsão estava errada. Nesse caso, ele <em>volta</em> ao último estado correto, e continua o jogo a partir desse ponto. É por isso que é chamado de &quot;<strong>Rollback multiplayer</strong>&quot;.</p>
  <h3>Determinismo</h3>
  <p>O Rollback é determinista. Ele só compartilha as entradas com outros jogadores, e espera que todos eles executem a mesma lógica na entrada dada, dando os mesmos resultados em todos os clientes.</p>
  <p>Uma abordagem diferente do multiplayer é a &quot;replicação de estado&quot;, que sincroniza continuamente o estado do jogo entre os clientes, garantindo que eles estejam sempre fazendo a mesma coisa.</p>
  <p>O Rollback não faz isso - ele só envia entradas, mas também fica de olho no estado para que possa ser revertido no caso de uma previsão errada.</p>
  <p class="note"><em><strong>O que é um cliente?</strong></em><br>
    <br>
    Um &quot;cliente&quot; é um jogador em seu jogo, e se refere a sua cópia do jogo, rodando em sua máquina.
  </p>
  <h2>Como funciona?</h2>
  <p>Como mencionado anteriormente, Rollback <strong>comunica apenas as informações</strong> entre os jogadores.</p>
  <p>Há duas coisas principais que Rollback manipula:</p>
  <ul class="colour">
    <li><strong>Entrada</strong>: As <a href="Rollback_Functions/rollback_define_input.htm">entradas de</a> cada jogador são enviadas para outros jogadores. Se o Player 0 pressionar <strong>&quot;fogo&quot;</strong> em seu próprio cliente, Rollback assegurará que outros clientes também vejam o Player 0 pressionar <strong>&quot;fogo&quot;</strong>.<br>
      <br>
     <strong>As previsões são feitas apenas com base em informações.</strong>
    </li>
    <li><strong>Estado</strong>: Isto inclui todas as variáveis administradas <span class="notranslate">objects</span> e suas variáveis. Estas NÃO estão sincronizadas entre os jogadores: mudar uma variável em um cliente não irá atualizá-la automaticamente em outro cliente.<br>
      <br>
     <strong>O Estado só é administrado com o propósito de ser revolvido.</strong>
    </li>
  </ul>
  <h2>Então... qual é a diferença?</h2>
  <p><strong>A entrada</strong> muda de <strong>estado</strong>, que é o conceito básico do Rollback multiplayer.</p>
  <p>Aqui está um exemplo:</p>
  <ul class="colour">
    <li><strong>Entrada</strong>: Player 0 pressiona <strong>&quot;fogo&quot;.</strong></li>
    <li><strong>Estado</strong>: Porque o Player 0 pressionou fogo, um projétil é criado. Esse projétil acaba colidindo com uma rocha. Isto faz com que o Player 0 ganhe um ponto.<br>
      <br>
      Este é essencialmente todo o seu jogo, dependendo inteiramente da entrada.
    </li>
  </ul>
  <p>&quot;<strong>Input</strong>&quot; é o que Rollback comunica entre todos os jogadores, não entre o estado.</p>
  <p>Entretanto, como todos os clientes de jogos executam a mesma lógica na entrada recebida (o que é uma exigência), <strong>todos eles resultam no mesmo estado</strong>.</p>
  <p><img class="center" height="521" src="../../../assets/Images/Scripting_Reference/GML/Reference/Rollback/multiplayer_input_sync_explained.png" width="1096" /></p>
  <h2>O que é estado, então?</h2>
  <p>Se apenas as entradas são sincronizadas, então para que serve <strong>o estado</strong>?</p>
  <p>Como o input afeta o estado, uma previsão de input errada pode resultar em um <strong>estado errado</strong>.</p>
  <p>Quando o rollback descobre que uma previsão estava errada, ele substitui o estado atual pelo estado correto, e executa entradas e previsões a partir desse ponto novamente. Isto inclui todas as suas variáveis gerenciadas <span class="notranslate">objects</span> e suas variáveis.</p>
  <p>Isto não significa que a Rollback está sincronizando <span class="notranslate">objects</span> e variáveis entre clientes. Só porque <span class="inline2">a variável_a</span> está definida como <span class="inline2">&quot;Gurpreet</span> &quot; em um cliente, não significa que outros clientes também verão o mesmo valor.</p>
  <p>Eles só veriam o mesmo valor para uma variável se ela fosse derivada da entrada de um jogador, ou algum outro sistema gerenciado, como alarmes e funções aleatórias.</p>
  <h2 id="h2">Objetos administrados</h2>
  <p>Os objetos têm uma caixa de seleção &quot;<strong>Gerenciado</strong>&quot;, que é habilitada para o novo <span class="notranslate">objects</span> por padrão:</p>
  <p><img>Os objetos que são marcados como administrados têm a capacidade de serem rolados para trás e de fazer previsões sobre eles, incluindo todas as suas variáveis, criação e destruição.</p>
  <p>Todos <span class="notranslate">objects</span> que fazem parte de sua jogabilidade, como o jogador, gerente/controlador <span class="notranslate">objects</span>, pickups de itens, projéteis, etc., devem ser marcados como gerenciados.</p>
  <p>Você pode desativar isto para <span class="notranslate">objects</span> que não precisam ser sincronizados entre jogadores, como o mundo estático <span class="notranslate">objects</span>, visuais, efeitos, etc. que não afetam de forma alguma a jogabilidade do jogo.</p>
  <p>Observe que a propriedade administrada de um pai não é aplicada automaticamente a seus filhos, portanto cada criança <span class="notranslate">object</span> precisa ter sua caixa de seleção administrada definida manualmente.</p>
  <h2 id="h">Teste de sincronia</h2>
  <p><span class="inline"><a href="Rollback_Functions/rollback_create_game.htm">rollback_create_game()</a></span> aceita um argumento para Sync Test, que é ativado por padrão (quando o argumento não é especificado).</p>
  <p>O Sync Test é usado para testar seu jogo offline. Se aparecer algum problema de sincronização, ele permite que você saiba, imprimindo o erro no Log de Saída. Você pode usar o Sync Test em <span class="notranslate">Windows</span>, macOS e Opera GX.</p>
  <p>Sync Test executa todo o código de seu jogo duas vezes em um frame, para que ele possa verificar qualquer problema de sincronização. Isto significa que você pode ver alguns eventos acontecendo duas vezes ao testar offline, o que não acontecerá quando seu jogo estiver rodando online.</p>
  <h3>Entrada aleatória e falsa</h3>
  <p>Durante o Sync Test, as instâncias de jogadores &quot;remotos&quot; recebem valores de entrada aleatórios para suas <a href="Defining_Inputs.htm">entradas definidas</a>, como uma forma simples de teste. Você pode desativar isto usando <span class="inline"><a href="Rollback_Functions/rollback_use_random_input.htm">rollback_use_random_input()</a></span>.</p>
  <p><video class="center" src="../../../assets/Images/Scripting_Reference/GML/Reference/Rollback/rollback_two_players_synctest.mp4" width="856" height="420" controls="" align="center"></video></p>
  <p class="video_subtitle">O segundo jogador está recebendo entrada aleatória durante o Sync Test.</p>
  <p>Você também pode atribuir uma entrada de simulação temporária aos jogadores remotos quando em Sync Test. Veja <a data-xref="{text}" href="Defining_Inputs.htm#h1">Mock Input</a> para detalhes.</p>
  <h2>Desenvolvendo o Multiplayer de forma eficaz</h2>
  <p>Você deve garantir que todos os clientes de jogos executem a <strong>mesma lógica</strong> quando a <strong>mesma entrada</strong> for recebida. Se uma determinada instância foi criada ou movida apenas para um cliente, ela não será refletida nos outros clientes.</p>
  <p>Este problema normalmente não ocorre se você programar seu jogo como mostrado em <a data-xref="{title}" href="Creating_Multiplayer.htm">Criar um Jogo Multiplayer</a>, com toda a lógica do jogador correndo da mesma maneira para todas as instâncias do jogador, independentemente de uma instância ser <a href="Rollback_Variables/player_local.htm">local ou não</a>. Entretanto, se você implementar uma condição para fazer algo apenas para um determinado jogador, e não para outros, isso causará uma perturbação no estado do jogo.</p>
  <h2 id="h1">Definindo um objeto do jogador</h2>
  <h3>Criação automática de instâncias do jogador</h3>
  <p>Como mostrado em <a data-xref="{title}" href="Creating_Multiplayer.htm">Create a Multiplayer Game</a>, você pode definir um jogador <span class="notranslate">object</span> com <span class="inline"><a href="Rollback_Functions/rollback_define_player.htm">rollback_define_player()</a></span> / <a data-xref="{title}" href="../../../Drag_And_Drop/Drag_And_Drop_Reference/Rollback/Define_Player.htm">Define Player (Rollback)</a> e o sistema criará automaticamente instâncias dele para cada jogador conectado. Ele também destruirá instâncias para jogadores que se desconectarem.</p>
  <p>As instâncias do jogador criadas desta forma têm seus IDs atribuídos automaticamente, na variável <span class="inline"><a data-xref="{title}" href="Rollback_Variables/player_id.htm">player_id</a></span>. Dentro de cada instância de jogador, você pode simplesmente chamar <a href="Rollback_Functions/rollback_get_input.htm"><span class="inline">rollback_get_input()</span></a> sem nenhum argumento e dá a você as entradas para aquele jogador em particular.</p>
  <p>Esta é a maneira padrão de usar o sistema Rollback, porém você também pode gerenciar manualmente as instâncias do jogador e suas entradas.</p>
  <h3>Criação Manual de Instâncias do Jogador</h3>
  <p>Para gerenciar as instâncias do jogador manualmente, não ligue para <span class="inline"><a href="Rollback_Functions/rollback_define_player.htm">rollback_define_player()</a></span>. Isto fará com que o jogo comece sem que nenhuma instância de jogador seja criada.</p>
  <p>Em seguida, crie suas próprias instâncias de jogador manualmente, idealmente no evento <a data-xref="{text}" href="Rollback_Events.htm#h">Rollback Start</a>, e dê a eles IDs de jogador em uma variável personalizada. Para obter informações para um jogador, ligue para <a href="Rollback_Functions/rollback_get_input.htm"><span class="inline">rollback_get_input()</span></a> e especificar a identificação do jogador como um argumento. Ligue para <a href="Rollback_Functions/rollback_get_info.htm"><span class="inline">rollback_get_info()</span></a> para obter essas <a href="Rollback_Variables/Rollback_Variables.htm">variáveis</a> em um <span class="notranslate">struct</span> que de outra forma seriam atribuídas aos jogadores automaticamente.</p>
  <p>Desta forma, você pode gerenciar manualmente quando e como as instâncias do jogador são criadas, os IDs atribuídos a elas, e recuperando a entrada para um jogador específico.</p>
  <h3>Mantenha as Instâncias do Jogador Vivas</h3>
  <p>Se você estiver usando <span class="inline"><a href="Rollback_Functions/rollback_define_player.htm">rollback_define_player()</a></span> / <a data-xref="{title}" href="../../../Drag_And_Drop/Drag_And_Drop_Reference/Rollback/Define_Player.htm">Define Player (Rollback)</a>, não destrua as instâncias do jogador que são criadas. Se você precisar mostrar um jogador como derrotado, então mude seu <span class="notranslate">sprite</span>, ou esconda-o usando algum outro método, mas mantenha a instância viva como é administrada por <span class="notranslate">GameMaker</span>.</p>
  <h2>Jogador único</h2>
  <p>O sistema Rollback pode ser usado ao criar um jogo para um único jogador. Basta especificar <strong>1</strong> como o número de jogadores ao ligar para <span class="inline"><a href="Rollback_Functions/rollback_create_game.htm">rollback_create_game()</a></span>.</p>
  <p>Desta forma, o sistema nunca se conectará a nenhum <span class="notranslate">servers</span> e seu jogo será essencialmente offline, com a capacidade de ser expandido para um jogo multiplayer online sempre que você desejar.</p>
  <p>Adote esta abordagem quando estiver fazendo um novo projeto que poderá fazer uso do multiplayer no futuro, pois será mais difícil implementar o multiplayer em seu jogo uma vez que ele já esteja concluído sem usar o sistema Rollback.</p>
  <h2 id="h4">Manual vs. Auto Start</h2>
  <p>Por padrão, um jogo multiplayer começa assim que todos os jogadores se juntam. Entretanto, você pode iniciá-lo antes desse ponto, chamando <a href="Rollback_Functions/rollback_start_game.htm"><span class="inline">rollback_start_game()</span></a>.</p>
  <p>Você pode desativar completamente o comportamento de partida automática, chamando <a href="Rollback_Functions/rollback_use_manual_start.htm"><span class="inline">rollback_use_manual_start()</span></a>. Isto significa que o jogo esperará que você inicie o jogo manualmente.</p>
  <p>A inicialização automática é automaticamente desativada quando as preferências do jogador <a href="Rollback_Functions/rollback_use_player_prefs.htm">são ativadas</a>.</p>
  <p><span></span></p>
  <h2>Leitura adicional</h2>
  <p>Leia as seguintes páginas para obter mais informações sobre o sistema Rollback:</p>
  <ul class="colour">
    <li><a data-xref="{title}" href="Defining_Inputs.htm">Definição de entradas</a></li>
    <li><a data-xref="{title}" href="Rollback_Constraints.htm">Restrições de Rollback</a></li>
    <li><a data-xref="{title}" href="Rollback_Events.htm">Eventos de Rollback</a></li>
    <li><a data-xref="{title}" href="Rollback_Preferences.htm">Preferências do jogador</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Voltar: <a data-xref="{title}" href="Rollback_Multiplayer.htm">Rollback Multiplayer</a></div>
        <div>A seguir: <a data-xref="{title}" href="Defining_Inputs.htm">Definição de entradas</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos os direitos reservados</span></h5>
  </div>
</body>
</html>