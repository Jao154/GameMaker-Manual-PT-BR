<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>Vídeos YUV</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../../../assets/css/default.css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Information on drawing YUV videos" />
  <meta name="template" content="../../../../assets/masterpages/Manual_Page.htt" />
  <meta name="rh-index-keywords" content="yuv videos" />
  <meta name="search-keywords" content="yuv videos" />
  <meta name="condition-tags" content="" />
</head>
<body>
  <h1>Vídeos YUV</h1>
  <p>Plataformas que utilizam o formato YUV colorido para vídeos requerem passos extras para o desenho desses vídeos. Isto envolve o uso de um <span class="notranslate">shader</span> para desenhar duas superfícies em um quadriciclo primitivo.</p>
  <p>Leia primeiro a página de referência <span class="inline"><a href="video_draw.htm">video_draw()</a></span> para obter informações sobre quais dados essa função retorna para os vídeos do YUV, e depois continue lendo abaixo para obter instruções sobre o uso desses dados para desenhar o vídeo.</p>
  <h2>YUV Shader</h2>
  <p>Crie um <span class="notranslate">shader</span> <span class="notranslate">asset</span> em seu projeto, e substitua seu código Fragmento <span class="notranslate">Shader</span> (<span class="inline2">.fsh</span>) por este:</p>
  <pre>//
// Fragmento da CUSTOM <span class="notranslate">shader</span> para manuseio de conteúdo YUV
//
variando vec2 v_vTexcoord;
variando vec4 v_vCor;
v_chroma uniforme do sampler2D;
const float x = 1,164383;
const float y = 1,138393;
const float z = 1,138393;
const vec3 src_bias = vec3(16,0 / 255,0, 128,0 / 255,0, 128,0 / 255,0);
const mat3 src_xform = mat3(1.00000000 * x, 0.00000000 * y, 1.57480000 * z,
                            1,00000000 * x, -0,18732427 * y, -0,46812427 * z,
			    1,00000000 * x, 1,85560000 * y, 0,00000000 * z);
principal vazio()
{
    float yy = textura2D(gm_BaseTexture, vec2(v_vTexcoord.x, v_vTexcoord.y)).r;
    vec2 cbcr = textura2D(v_chroma, vec2(v_vTexcoord.x, v_vTexcoord.y)).rg;
    vec3 yuv = vec3(yy, cbcr);
    yuv -= src_bias;
    yuv *= src_xform;
    gl_FragColor = vec4(yuv, 1.0);
}
  
</pre>
  <h2>Obter amostras</h2>
  <p>No evento Create do seu <span class="notranslate">object</span>, obtenha o ID do coletor de amostras do uniforme <span class="inline2">v_chroma</span> <span class="notranslate">shader</span>, somente se o vídeo for YUV:</p>
  <pre>var _format = video_get_format();
se (_formato == vídeo_formato_yuv)
{
    videochromasampler = shader_get_sampler_index(shader_YUV, &quot;v_chroma&quot;);
}
</pre>
  <h2 id="h">Vídeo do desenho</h2>
  <p>No evento de sorteio de seu <span class="notranslate">object</span>, ligue para <span class="inline"><a href="video_draw.htm">video_draw()</a></span>, e se sua primeira posição de matriz for <strong>0</strong> (significando que o vídeo está sendo reproduzido), desenhe o vídeo.</p>
  <p>No código abaixo, estamos usando uma declaração <span class="notranslate">switch</span> na função <span class="inline"><a href="video_get_format.htm">video_get_format()</a></span>. Se o vídeo estiver usando o formato RGBA, então ele simplesmente desenha a superfície na posição <span class="inline2">[1]</span> da matriz.</p>
  <p>Se o vídeo estiver usando o formato YUV, ele usa o <span class="notranslate">shader</span> para desenhar as duas superfícies (nas posições <span class="inline2">[1]</span> e <span class="inline2">[2]</span>) em um quadrilátero primitivo.</p>
  <pre>var _data = video_draw();
if(_data[0] == 0)
{
	switch(video_get_format())
	{
		case video_format_rgba:
			var _surf = _dados[1];
			draw_surface(_surf,0,0);
		pausa;
	
		// #### YUV PARTE AQUI ####
		case video_format_yuv:
			var _surf = _dados[1];
			var _chromasurf = _dados[2];
			if(surface_exists(_surf) e surface_exists(_chromasurf))
			{
				shader_set(shader_YUV);
			
				var _tex_id = surface_get_texture(_surf);
				var _chroma_tex_id = surface_get_texture(_chromasurf);
				text_set_stage(videochromasampler, _chroma_tex_id);
				gpu_set_texfilter(false);
			
				draw_primitive_begin_texture(pr_trianglestrip, _tex_id);
			        draw_vertex_tex_texture(0, 0, 0, 0, 0);
				draw_vertex_tex_texture(surface_get_width(_chromasurf), 0, 1, 0);
				draw_vertex_tex(0, surface_get_height(_chromasurf), 0, 1);
				draw_vertex_tex(superfície_get_width(_chromasurf), superfície_get_height(_chromasurf), 1, 1);
				draw_primitive_end();
			
				gpu_set_texfilter(true);
				shader_reset();
			}
		pausa;
	}
}
  </pre>
  <p>O código em <span class="inline2">case video_format_yuv:</span> faz o seguinte:</p>
  <ul class="colour">
    <li>Obtém a superfície de vídeo<span class="inline2">(_surf</span>) e a superfície cromada<span class="inline2">(_chromasurf</span>)</li>
    <li>Assegura que elas existam, usando <span class="inline"><a href="../Surfaces/surface_exists.htm">surface_exist()</a></span>
      <ul>
        <li>Define o <span class="notranslate">shader</span> para <span class="inline2">shader_YUV</span> (que é nosso recém-criado YUV <span class="notranslate">shader</span>)</li>
        <li>Obtém o <span class="notranslate">textures</span> de ambas as superfícies</li>
        <li>Atribui o <span class="notranslate">texture</span> da superfície cromada ao amostrador que recuperamos no evento Create</li>
        <li>Desativa a filtragem <span class="notranslate">texture</span> </li>
        <li>Começa a desenhar uma faixa triangular primitiva, com a superfície de vídeo <span class="notranslate">texture</span> atribuída a ela</li>
        <li>Desenha um retângulo para cobrir a superfície do vídeo, usa a largura e a altura da superfície cromada para esse retângulo</li>
        <li>Acaba com o primitivo</li>
        <li>Reativa <span class="notranslate">texture</span> filtragem e reinicialização do sombreador</li>
      </ul>
    </li>
  </ul>
  <p>Aqui a superfície principal do vídeo está sendo desenhada pelo primitivo, e a superfície cromada está sendo misturada a ela pelo <span class="notranslate">shader</span>. Esta é a razão pela qual o <span class="notranslate">texture</span> da superfície cromada foi passado para o <span class="notranslate">shader</span> através de um amostrador.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Voltar: <a data-xref="{text}" href="Videos.htm#h1">Reprodução de vídeo</a></div>
        <div>Próximo: <a data-xref="{title}" href="video_set_volume.htm">vídeo_set_volume</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
YUV	Videos
-->
  <!-- TAGS
-->
</body>
</html>