<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>audio_falloff_set_model_model</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining the function audio_falloff_set_model" />
  <meta name="rh-index-keywords" content="audio_falloff_set_model,audio_falloff_exponent_distance,audio_falloff_exponent_distance_clamped,audio_falloff_inverse_distance,audio_falloff_inverse_distance_clamped,audio_falloff_linear_distance,audio_falloff_linear_distance_clamped,audio_falloff_none" />
  <meta name="search-keywords" content="audio_falloff_set_model,audio_falloff_exponent_distance,audio_falloff_exponent_distance_clamped,audio_falloff_inverse_distance,audio_falloff_inverse_distance_clamped,audio_falloff_linear_distance,audio_falloff_linear_distance_clamped,audio_falloff_none" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">audio_falloff_set_model_model</span></h1>
  <p>Para adicionar mais versatilidade ao motor de áudio, o <span data-keyref="GameMaker Name">GameMaker</span> permite que você selecione o modelo de falloff que se adequa ao seu jogo. Este modelo será usado para <b>todas as</b> funções de áudio do jogo ou aplicativo, e assim você deve certificar-se de que o modelo escolhido é o correto, pois cada um afetará a forma como o ouvinte percebe os sons que você reproduz através dos emissores ou com a função <span class="inline"><a href="audio_play_sound_at.htm">audio_play_sound_at()</a></span>.</p>
  <p>O modelo falloff padrão é <span class="inline">audio_falloff_none</span>, o que significa que não há falloff ao usar emissores ou áudio posicionado, a menos que você mude o modelo falloff.</p>
  <h2>Modelos de Falloff</h2>
  <p>Ao reproduzir áudio através de <span class="inline"><a href="audio_play_sound_at.htm">audio_play_sound_at()</a></span> ou configurar o <a href="Audio_Emitters/audio_emitter_falloff.htm">falloff para um emissor</a>, há três argumentos que você precisará definir, e cada um deles é apropriado para um modelo específico e afetará a forma como o som final é ouvido pelo tocador, dependendo da distância que o ouvinte estiver da fonte. Os três argumentos são:</p>
  <ul class="colour">
    <li><b>Distância de referência</b>: esta é a distância do ouvinte sob a qual o volume do som tocado normalmente cairia pela metade antes de ser influenciado pelo fator de roll-off ou pela distância máxima especificada.<b></b></li>
    <li><b>Distância máxima</b>: isto define a distância onde não haverá mais nenhuma atenuação do som da fonte. Este pode ser o ponto em que o som não é mais ouvido <i>ou</i> o ponto em que o volume do som não diminui mais abaixo do limiar mínimo definido pelo modelo escolhido.<b></b></li>
    <li><b>Fator Falloff</b>: O fator de falloff é usado na atenuação da distância com base no modelo de distância inversa e estabelece o limite mínimo final para um som com falloff.</li>
  </ul>
  <p>Os modelos de falloff que são afetados por estes argumentos são representados no <span data-keyref="GameMaker Name">GameMaker</span> pelas seguintes constantes (a tabela mostra os cálculos exatos utilizados também):</p>
  <table>
    <colgroup>
      <col />
      <col />
    </colgroup>
    <tbody>
      <tr>
        <th colspan="2"><span data-keyref="Type_Constant_Audio_Falloff_Type"><a href="../../../../../GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_falloff_set_model.htm" target="_blank">Constante de Audio Falloff</a></span></th>
      </tr>
      <tr>
        <th>Constante</th>
        <th>Cálculo de Ganho</th>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">audio_falloff_exponent_distance</span></td>
        <td><span class="inline"><br />
            gain = (listener_distance / reference_distance) ^ (-falloff_factor)</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">audio_falloff_exponent_distance_clamped</span></td>
        <td><span class="inline"><br />
            distance = clamp(listener_distance, reference_distance, maximum_distance)<br />
            gain = (distance / reference_distance) ^ (-falloff_factor)</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">audio_falloff_exponent_distance_scaled</span></td>
        <td><span class="inline"><br />
            distance = clamp(listener_distance, reference_distance, maximum_distance)<br />
            <br />
            gain = ((distance / reference_distance) ^ (-falloff_factor)) * (((maximum_distance - distance) / (maximum_distance - reference_distance)) ^ (distance / maximum_distance))</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">audio_falloff_inverse_distance</span></td>
        <td><span class="inline"><br />
            gain = reference_distance / (reference_distance + falloff_factor * (listener_distance - reference_distance))</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">audio_falloff_inverse_distance_clamped</span></td>
        <td><span class="inline"><br />
            distance = clamp(listener_distance, reference_distance, maximum_distance)<br />
            gain = reference_distance / (reference_distance + falloff_factor * (distance - reference_distance))</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">audio_falloff_inverse_distance_scaled</span></td>
        <td><span class="inline"><br />
            distance = clamp(listener_distance, reference_distance, maximum_distance)<br />
            <br />
            gain = (reference_distance / (reference_distance + falloff_factor * (distance - reference_distance))) * (((maximum_distance - distance) / (maximum_distance - reference_distance)) ^ (distance / maximum_distance))</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">audio_falloff_linear_distance</span></td>
        <td><span class="inline"><br />
            distance = min(distance, maximum_distance)<br />
            gain = (1 - falloff_factor * (distance - reference_distance) / (maximum_distance - reference_distance))</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">audio_falloff_linear_distance_clamped</span></td>
        <td><span class="inline"><br />
            distance = clamp(listener_distance, reference_distance, maximum_distance)<br />
            gain = (1 - falloff_factor * (distance - reference_distance) / (maximum_distance - reference_distance))</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">audio_falloff_none</span></td>
        <td><span class="inline"><br />
            gain = 1</span></td>
      </tr>
    </tbody>
  </table>
  <p>Os modelos &quot;<span class="inline">_scaled</span>&quot; são escalonados de tal forma que os sons caem inteiramente pela distância máxima.</p>
  <p>Os seguintes gráficos são representações visuais de como algumas das constantes acima funcionam e afetam o som que está sendo tocado:</p>
  <p><img alt="Distance Model Examples" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Audio/Distance_Models.png" /></p>
  <p> </p>
  <h4>Sintaxe:</h4>
  <p class="code"><span data-field="title" data-format="default">audio_falloff_set_model</span>(model);</p>
  <table>
    <tbody>
      <tr>
        <th>Argumento</th>
        <th>Tipo</th>
        <th>Descrição</th>
      </tr>
      <tr>
        <td><span class="notranslate">model</span></td>
        <td><span data-keyref="Type_Constant_Audio_Falloff_Type"><a href="../../../../../GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_falloff_set_model.htm" target="_blank">Constante de Audio Falloff</a></span></td>
        <td><span class="notranslate">The <b>constant</b> used to set the falloff model.</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Devoluções:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Exemplo:</h4>
  <p class="code"><span data-field="title" data-format="default">audio_falloff_set_model</span>(audio_falloff_exponent_distance_clamped);<br />
    audio_play_sound_at(snd_Waterfall, x, y, 0, 100, 300, 1, true, 1);</p>
  <p>O código acima define o modelo falloff e depois toca o som indexado na variável &quot;snd_Waterfall&quot;, que será laçada em sua posição <span class="notranslate">room</span>, com uma referência de queda de 100, uma distância de falloff de 300, um fator de falloff de 1 e uma baixa prioridade.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="Audio.htm">Áudio</a></div>
        <div style="float:right">A seguir: <a href="audio_sound_gain.htm"><span class="notranslate">audio_sound_gain</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
audio_falloff_set_model
audio_falloff_exponent_distance
audio_falloff_exponent_distance_clamped
audio_falloff_inverse_distance
audio_falloff_inverse_distance_clamped
audio_falloff_linear_distance
audio_falloff_linear_distance_clamped
audio_falloff_none
-->
  <!-- TAGS
audio_falloff_set_model
-->
</body>
</html>