<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Tipos de dados</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining Data Types" />
  <meta name="rh-index-keywords" content="Data Types" />
  <meta name="search-keywords" content="Data Types" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Tipos de dados</h1>
  <p>Na seção anterior cobrimos <a href="Variables_And_Variable_Scope.htm">as variáveis e suas regras de escopo</a>, mas pouco foi dito sobre os diferentes <b>tipos de dados</b> que uma variável pode armazenar. Portanto, esta seção explica os diferentes tipos e para que eles podem ser usados.</p>
  <p>Antes de continuar, vamos apenas explicar brevemente o que queremos dizer com &quot;tipos de dados&quot;. Quando você cria uma variável, ela pode ser usada para armazenar informações, e quando você chama uma função, ela também pode armazenar informações retornadas. Entretanto, esta informação pode vir em vários &quot;sabores&quot; - por exemplo, pode ser um <em>número real</em> ou pode ser uma <em>string</em>. Estes diferentes tipos de valores usados são chamados de <b>tipos de dados</b> e quando se usa o <span class="notranslate">GameMaker Language</span> eles podem ser qualquer um dos seguintes:</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Números reais</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Os números reais são qualquer valor que não seja um <span class="notranslate">string</span>, nem qualquer outro tipo de dado possível. Portanto, 124, 45639.566546456, 0, -45.5 etc... são todos exemplos de números reais. Todos os números reais são armazenados como valores de ponto flutuante de precisão dupla de 64 bits (ou valores inteiros), e o compilador otimizará sempre que possível (por exemplo, 0,0 será otimizado para o valor inteiro de 0).</p>
    <p class="dropspot">Ao lidar com qualquer valor que não seja um número inteiro, você pode experimentar pequenos erros de arredondamento devido à natureza da matemática de ponto flutuante. Para maiores informações sobre esta e outras funções relacionadas a números, por favor, veja: <a href="../GML_Reference/Maths_And_Numbers/Number_Functions/Number_Functions.htm">Referência GML - Funções Numéricas</a>.</p>
    <p class="note"><span class="note">NOTA</span> No alvo <b>HTML5</b>, todos os números reais são duplas.</p>
    <p class="dropspot">Note que embora as variáveis criadas no <span data-keyref="GameMaker Name">GameMaker</span> sejam todas armazenadas como números de ponto flutuante de precisão dupla ou inteiros, você ainda pode usar outros formatos ao lidar com <span class="notranslate">extensions</span>. Estes podem ser passados para o <span data-keyref="GameMaker Name">GameMaker</span> a partir de um <span class="notranslate">extension</span> e depois verificados usando a função apropriada <span class="inline">is_*()</span>, uma lista que pode ser encontrada <a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">aqui</a>.</p>
    <p> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#">Booleano</a></p>
  <div class="droptext" data-targetname="drop-down6">
    <p class="dropspot">Um booleano é simplesmente um valor que pode ser <span class="inline">true</span> ou <span class="inline">false</span>. Note que atualmente o <span data-keyref="GameMaker Name">GameMaker</span> interpretará um número real igual ou inferior a 0,5 como um valor <span class="inline">false</span>, e qualquer número real maior que 0,5 como sendo <span class="inline">true</span>.
      Isso <i>não</i> significa, entretanto, que você deve verificar 1 e 0 (ou qualquer outro número real) para verdadeiro e falso, pois você também receberá as <b>constantes</b> <span class="inline">true</span> e <span class="inline">false</span> que devem sempre ser usadas em seu código para
      prevenir quaisquer problemas caso tipos de dados booleanos reais sejam adicionados em uma atualização futura.</p>
    <p class="dropspot">Você pode converter qualquer número real em um valor implicitamente booleano usando a seguinte função:</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="../GML_Reference/Variable_Functions/bool.htm"><span class="notranslate">bool</span></a></li>
    </ul>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Cordas</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot"><label for="one">Um <span class="notranslate">string</span> é simplesmente qualquer texto que tenha sido colocado entre aspas &quot;...&quot;. Você pode realizar certas operações em <span class="notranslate">strings</span>, como adicionar dois <span class="notranslate">strings</span> juntos para criar um <span class="notranslate">string</span> mais longo (concatenação) e você também pode alterar as propriedades <span class="notranslate">string</span> e até mesmo extrair números reais dele. Para maiores informações sobre <span class="notranslate">strings</span> e as funções <span class="notranslate">string</span>, veja: <a href="../GML_Reference/Strings/Strings.htm">Referência GML - Strings</a>.</label></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">Arrays</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot"><label for="three">Uma matriz é um tipo de dado especial que pode ser usado para conter vários valores. Você atribui o array a uma variável e depois &quot;preenche&quot; diferentes índices do array com valores. Este array pode então ser passado para <span class="notranslate">scripts</span> e funciona em uma base de passagem por referência, entretanto, se você modificar o array passado, ele se tornará então uma cópia do array original e assim precisará ser retornado para a variável original para que o array seja atualizado. Para mais informações sobre arrays, por favor, veja: <a href="Arrays.htm">Visão geral do GML - Arrays</a>.</label></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">Structs</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot"><label for="eleven">Um <span class="notranslate">struct</span> (às vezes chamado de &quot;objeto leve&quot;) é uma estrutura de dados brutos que atua como um recipiente para variáveis de todos os tipos de dados. Você atribui um <span class="notranslate">struct</span> a uma variável e no <span class="notranslate">struct</span> você pode então definir outras variáveis e estas podem então ser lidas ou escritas conforme necessário. Para informações mais detalhadas sobre <span class="notranslate">structs</span>, consulte a seção <a href="Structs.htm">GML Overview - Structs</a>.</label></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">Método Variáveis</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot"><label for="twelve">Uma variável de método é uma variável que foi atribuída a uma função e pode ser usada exatamente da mesma forma que você usaria uma função <span class="notranslate">GML</span> <span class="notranslate">runtime</span>. Para informações mais detalhadas, consulte a seção <a href="Method_Variables.htm">Variáveis de método</a>.</label></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down13" href="#">int64</a></p>
  <div class="droptext" data-targetname="drop-down13">
    <p class="dropspot">Um &quot;int64&quot; é um inteiro de 64 bits que pode ser criado usando <span class="inline"><a href="../GML_Reference/Variable_Functions/int64.htm">int64()</a></span> (passando em um número real não-64 bits) ou ao ler um valor <span class="inline">buffer_u64</span> a partir de um <a href="../GML_Reference/Buffers/buffer_read.htm">buffer</a>.</p>
    <p class="dropspot">Isto pode ser usado em lugares onde um inteiro de 64 bits é estritamente necessário, ou quando você quer trabalhar com a <a href="../../Additional_Information/Bitwise_Operators.htm">troca de bits</a> e precisa dessas posições de 64 bits.</p>
    <p class="dropspot">Qualquer operação bitwise, mesmo quando executada com valores não-64 bits, sempre retornará um inteiro de 64 bits de volta.</p>
    <p class="dropspot">As divisões sobre valores int64 também retornarão inteiros (por exemplo: <span class="inline2">int64(5) / int64(2) = 2</span>).</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#">Valores hexadecimais</a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p class="dropspot"><span data-keyref="GameMaker Name">O GameMaker</span> aceitará <b>as literaturas hexadecimais</b> como valores legítimos. Os valores hexadecimais são especialmente comuns quando se trabalha com cores, mas podem ser usados em qualquer lugar em que um valor inteiro positivo seja necessário. Os valores hexadecimais podem ser formatados das duas maneiras a seguir, onde <span class="inline"><em>abcd</em></span> seria o valor hexadecimal real:</p>
    <p class="code"><span style="background-color: transparent;"><strong>$</strong><em>abcd</em></span><br />
      <strong>0x</strong><em>abcd</em>
    </p>
    <p class="dropspot">Por exemplo, os seguintes valores decimais podem ser expressos como hexadecimais, como mostrado:</p>
    <p class="code"><strong>11406</strong> -&gt; $2c8e, 0x2c8e<br />
      <strong>16777215</strong> -&gt; $ffffff, 0xffffff
    </p>
    <hr />
    <p class="dropspot">Um valor hexadecimal também pode começar com um símbolo hash/pound<span class="inline2">(#</span>), porém quando escrito desta forma, seu valor não será igual a um valor hexadecimal similar escrito usando um formato previamente mostrado<span class="inline2">($</span> ou <span class="inline2">0x</span>). Isto se deve à forma como as cores são interpretadas em <span class="notranslate">GML</span>, que exigiu que o formato dos valores hexadecimais de hash/libra fosse alterado para que as cores CSS pudessem ser escritas em um formato <span class="inline2">#RRGGBB</span>. Para mais informações, leia <a data-xref="{text}" href="../GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm#h">Hex Colours</a>.</p>
    <p class="dropspot">Por exemplo, os dois seguintes não são iguais:</p>
    <p class="code">$2c8edd <strong>!=</strong> #2c8edd</p>
    <p class="dropspot">Para que se referissem ao mesmo valor decimal, seria necessário trocar os dois primeiros e os dois últimos caracteres:</p>
    <p class="code">$<strong>2c</strong>8edd <strong>=</strong><strong>=</strong> #dd8e<strong>2c</strong></p>
    <p> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#">Pointer</a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p class="dropspot">Um ponteiro é um tipo de dado que &quot;aponta&quot; para um local de memória. Você não pode fazer operações em um ponteiro e ele é usado apenas para algumas funções muito específicas, como obter um endereço <span class="notranslate">texture</span> ou <span class="notranslate">buffer</span> da memória para outra função. Para exemplos de funções que retornam um ponteiro, você pode ver <a href="../GML_Reference/Buffers/buffer_get_address.htm"><span class="inline">buffer_get_address()</span></a> ou <a href="../GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_texture.htm"><span class="inline">sprite_get_texture()</span></a>.</p>
    <p class="dropspot">Há também uma função para verificar se um valor é um ponteiro (ver &quot;<b>Verificação de tipos de dados</b>&quot;, abaixo) e uma função para converter um valor em um ponteiro:</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="../GML_Reference/Variable_Functions/ptr.htm" style="background-color: transparent;"><span class="notranslate">ptr</span></a></li>
    </ul>
    <p class="dropspot">Você também pode usar (e receber de volta) os seguintes itens construídos em constantes ao usar as indicações:</p>
    <table class=" cke_show_border">
      <tbody>
        <tr>
          <th>Constante</th>
          <th>Descrição</th>
        </tr>
        <tr>
          <td><span class="notranslate"><span class="inline">pointer_null</span></td>
          <td>Esta constante indica que o ponteiro não está apontando para nada significativo (o mesmo que <span class="inline">NULL</span> em C++ ou <span class="inline">null</span> em C#). Este valor é <a class="glossterm" data-glossterm="falso" href="#">falso</a>.</td>
        </tr>
        <tr>
          <td><span class="notranslate"><span class="inline">pointer_invalid</span></td>
          <td>Esta constante significa simplesmente que o valor não é um ponteiro válido</td>
        </tr>
      </tbody>
    </table>
    <p> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#">Enum</a></p>
  <div class="droptext" data-targetname="drop-down8">
    <p class="dropspot">Um enumero é um &quot;enumerador&quot;, e permite essencialmente criar seu próprio tipo de dados limitado com uma lista de valores constantes. Os enumeros são explicados em profundidade na página de <a href="Variables/Constants.htm">Constantes</a>.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#">Indefinido</a></p>
  <div class="droptext" data-targetname="drop-down9">
    <p class="dropspot"><label for="seven">Um valor <span class="notranslate">undefined</span> (também conhecido como um valor &quot;nulo&quot;) é aquele em que uma expressão não tem um valor correto, embora seja sintaticamente correta, e assim deve retornar <i>algo</i>. Por exemplo, digamos que você tenha um <a href="../GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm">mapa DS</a> e use a função <a href="../GML_Reference/Data_Structures/DS_Maps/ds_map_find_value.htm"><span class="inline">ds_map_find_value()</span></a>. Agora, o que acontece quando o mapa não tem o valor que está sendo procurado? Bem, como a função está formatada corretamente, e a questão é que o valor não existe, então ele retornaria a constante <span class="inline">undefined</span>, e você pode verificar esta constante como verificaria <span class="inline">true</span> ou qualquer outro valor.<br></label></p>
    <p class="code"><label for="seven">var _value = ds_map_find_value(my_map, &quot;key&quot;);<br /><br />if (<a href="../GML_Reference/Variable_Functions/is_undefined.htm">is_undefined</a>(value)) {<br />    show_debug_message(&quot;The key does not exist!&quot;);<br />}</label><br /></p>
    <p class="dropspot"> <br /></p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down10" href="#">NaN</a></p>
  <div class="droptext" data-targetname="drop-down10">
    <p class="dropspot"><label for="nine"><span class="inline">NaN</span> significa &quot;não um número&quot;, e é uma constante que pode ser devolvida quando o compilador não pode avaliar os resultados de uma operação como um número. Por exemplo, 0/0 não pode ser definido como um número real, e portanto é representado por <span class="inline">NaN</span>, ou a raiz quadrada de um número negativo - que é considerada um número &quot;imaginário&quot; - não pode ser representada como um número real, e portanto é representada por <span class="inline">NaN</span>.</label></p>
    <p class="dropspot">Note que como <span class="inline">NaN</span> não é um número, ele não pode ser comparado a si mesmo, portanto comparações como <span class="inline">NaN == NaN</span> retornarão <span class="inline">false</span>. O mesmo vale para uma comparação de array como esta:</p>
    <p class="code">show_debug_message(array_equals([NaN], [NaN]));<br />
      <br />
      // Output: 0 (false)
    </p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down11" href="#">Infinito</a></p>
  <div class="droptext" data-targetname="drop-down11">
    <p class="dropspot">A constante <span class="inline">infinity</span> refere-se a um número considerado infinito, tal como o resultado que você obteria ao dividir qualquer valor de ponto flutuante por zero, por exemplo: 1,0/0.</p>
    <p class="dropspot">Note que a constante <span class="inline">infinity</span> é igual a si mesma, portanto <span class="inline">infinity == infinity</span> retornará <span class="inline">true</span>.</p>
  </div>
  <p id="variable"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down12" href="#">Qualquer</a></p>
  <div class="droptext" data-targetname="drop-down12">
    <p class="dropspot">O tipo de dados<strong>&quot;Qualquer</strong>&quot; pode ser encontrado em muitas páginas do manual, por exemplo, <a href="../GML_Reference/Variable_Functions/is_string.htm">nos argumentos,</a> ou como um <a href="../GML_Reference/Variable_Functions/array_get.htm">valor de retorno</a>. Ele indica que <em>qualquer tipo de valor</em> é aceito ou pode ser devolvido.</p>
  </div>
  <p> </p>
  <p>Você pode verificar o tipo de dados de qualquer variável usando as funções listadas na página a seguir:</p>
  <ul class="colour">
    <li><a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">Funções variáveis</a></li>
  </ul>
  <p>Você também pode encontrar aqui tabelas do tipo aritmético que mostram os resultados de diferentes operações usando tipos de dados variáveis mistas:</p>
  <ul class="colour">
    <li><a data-xref="{title}" href="../../Additional_Information/Type_Tables.htm">Tabelas de tipo</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="GML_Overview.htm">Visão geral da GML</a></div>
        <div style="float:right">A seguir: <a data-xref="{title}" href="Language_Features/If_Else_and_Conditional_Operators.htm">se/outros e Operadores Condicionais</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
Data Type - Real
Data Type - String
Data Type - Pointer
Data Type - Undefined
Data Type - Enum
Data Type - True
Data Type - False
Data Type - Array
Data Type - Boolean
Data Type - NaN
Data Type - Infinite
Data Type - Struct
real
string
pointer
undefined
enum
true
false
arrays
boolean
NaN
infinite
ptr
struct
pointer_null
pointer_invalid
-->
  <!-- TAGS
data_type
real
string
pointer
undefined
enum
true
false
arrays
boolean
ptr
struct
pointer_null
pointer_invalid
-->
</body>
</html>