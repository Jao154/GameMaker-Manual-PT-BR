<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Abordagem de variáveis em outras instâncias</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining hoe to address variables in other instances" />
  <meta name="rh-index-keywords" content="Addressing Variables In Other Instances" />
  <meta name="search-keywords" content="" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Abordagem de variáveis em outras instâncias</h1>
  <p>Nas seções dedicadas às <a href="Variables_And_Variable_Scope.htm">variáveis</a> você descobriu como criar e usar variáveis dentro de uma única instância, ou em um escopo global, mas o que acontece se você quiser que uma instância acesse uma variável em outra instância, diferente? Há muitos casos em que você pode querer fazer isso, por exemplo, em uma colisão com um projétil <span class="notranslate">object</span>, você pode querer descobrir quanto dano o projétil faz ao acessar uma variável no projétil, ou você pode querer parar o movimento de todas as bolas em um quebra-cabeça, ou você pode querer mover o personagem principal para uma determinada posição, ou qualquer número de outras situações que você normalmente encontra em qualquer jogo. Felizmente, o <span class="notranslate">GameMaker Language</span> vem equipado com mecanismos para conseguir isso.</p>
  <p>Um dos métodos mais comuns para acessar ou alterar uma variável em <em>outra </em>instância é usar seu nome <span class="notranslate">object</span> como identificador, e então usar um ponto &quot;<span class="inline">.</span>&quot; para dizer ao <span data-keyref="GameMaker Name">GameMaker</span> que a variável a ser referenciada deve ser atribuída ou alterada dentro daquela instância específica do objeto. Isto é conhecido como &quot;notação de ponto&quot;, e sua sintaxe é a seguinte:</p>
  <p class="code">&lt;object_id&gt;.&lt;<em>variable</em>&gt; = &lt;value&gt;; </p>
  <p>Na prática, seria assim:</p>
  <p class="code">obj_ball.speed = 0;</p>
  <p>Com o código acima, você está definindo a velocidade de uma instância de &quot;<span class="inline">obj_ball</span>&quot;. Entretanto, se você tiver mais de uma instância do dado <span class="notranslate">object</span> no <span class="notranslate">room</span>, <em>então ele se aplicará a TODAS elas igualmente</em> - a menos que você esteja usando <b>HTML5</b>, caso em que afetará apenas <em>uma</em>, mas você não tem como saber qual delas afetará - então, se você precisar acessar todas as instâncias de um <span class="notranslate">object</span>, você deve estar usando <a href="Language_Features/with.htm"><span class="inline">with()</span></a>pois isso é 100% compatível com plataformas cruzadas. Em geral, este formato só deve ser usado quando você tiver uma única instância do <span class="notranslate">object</span> no <span class="notranslate">room</span>, ou (como você verá na próxima parte) quando você tiver uma <i> <b>identificação de</b></i> instância específica. </p>
  <p>Você também pode acessar uma única instância de um <span class="notranslate">object</span> quando há múltiplas instâncias dentro do <span class="notranslate">room</span> usando o <b>nome da instância</b> única para dizer ao <span data-keyref="GameMaker Name">GameMaker</span> exatamente qual instância desejamos abordar. O <b>nome da instância constante</b> é a única constante de identificação que é dada a cada instância adicionada a um <span class="notranslate">room</span> em seu jogo. Você pode encontrar esta constante clicando duas vezes em uma instância no <a href="../../The_Asset_Editors/Rooms.htm">editor da sala</a>:</p>
  <p><img>Note que este nome pode ser editado e receber um nome mais descritivo - embora o nome <em>deva</em> ser único para todo o jogo - e pode ser usado como o lado esquerdo do ponto:</p>
  <p class="code">inst_4DB70D2.speed = 0;</p>
  <p>De longe o método mais comum e prático, entretanto, é usar uma <i>variável</i> à esquerda do ponto, desde que a variável em questão<i> tenha armazenado uma <b>identificação de instância</b></i> válida. Os exemplos a seguir ilustram isto.</p>
  <p class="code">// Example 1<br />
    var _inst = instance_position(mouse_x, mouse_y, all);<br />
    if (instance_exists(_inst)) <br />
    {<br />
        _inst.speed = 0;<br />
    }<br />
    <br />
    // Example 2<br />
    var _inst = instance_create_layer(mouse_x, mouse_y, &quot;Enemies&quot;, obj_E_Parent);<br />
    _inst.direction = point_direction(_inst.x, _inst.y, x, y);<br />
    _inst.target = id;
  </p>
  <p>No código acima para o Exemplo 1, há um <a href="../GML_Reference/Asset_Management/Instances/instance_exists.htm"><span class="inline">instance_exists()</span></a> chamada no bloco de código. Isto porque a utilização do método de ponto para acessar ou alterar outro valor de instâncias dará um erro e travará o jogo se a instância não existir, e há a possibilidade de que este seja o caso neste exemplo. Entretanto, não precisamos da verificação nos exemplos 2 e 3 porque <i>sabemos</i> que a instância está lá, já que no exemplo 2 a criamos, e no exemplo 3, é a outra instância em um evento de colisão. Entretanto, se houver <i>qualquer</i> possibilidade de que a instância possa ser destruída, desativada ou de outra forma removida do <span class="notranslate">room</span> enquanto estiver usando este método, você deve <i>sempre</i> verificar antes usando a função <span class="inline">instance_exists()</span> ou a função <a href="../GML_Reference/Asset_Management/Instances/instance_number.htm"><span class="inline">instance_number()</span></a> função.</p>
  <p>Observe que você não pode usar a <a href="Instance_Keywords.htm">palavra-chave</a> especial &quot;<span class="inline">all</span>&quot; com este método para direcionar todas as instâncias (por exemplo: <span class="inline">all.val = 10</span> daria um erro), mas você <i>pode</i> usar as palavras-chave &quot;<span class="inline">other</span>&quot; e &quot;<span class="inline">self</span>&quot; sem problemas. Por exemplo, usando <span class="inline">other</span> em um <a href="../../The_Asset_Editors/Object_Properties/Object_Events.htm">evento de colisão</a>:</p>
  <p class="code">// Example 3 other.hp -= 10;<br />
    if (other.hp &lt;= 0)<br />
    {<br />
        other.sprite_index = spr_E_Dead;<br />
    }</p>
  <p>Também é importante notar que você não pode usar nenhuma função por si só como o lado esquerdo de uma tarefa. Por exemplo, o seguinte código lhe daria um erro:</p>
  <p class="code">instance_nearest(x, y, obj).speed = 0;</p>
  <p>O valor de retorno para a expressão naquele exemplo de código é um número inteiro (o valor de identificação único para a instância mais próxima) e por isso deve ser incluído entre parênteses <span class="inline">()</span> para ser usado desta forma e endereçar corretamente a instância requerida. O código acima seria escrito corretamente como:</p>
  <p class="code">(instance_nearest(x, y, obj)).speed = 0;<br />
    <br />
    //or<br />
    <br />
    var _inst = instance_nearest(x, y, obj);<br />
    _inst.speed = 0;
  </p>
  <p>Todas estas são formas perfeitamente válidas de ler, alterar e definir variáveis em outras instâncias, e funcionam porque o ponto é realmente um <i>operador</i>. Ele toma um valor como <a class="glossterm" data-glossterm="operand" href="#">operando</a> da esquerda e uma variável como operando da direita, e retorna o endereço desta variável em particular na <span class="notranslate">object</span> ou instância indicada. Todos os nomes <span class="notranslate">object</span>, constantes, IDs etc... representam simplesmente valores e estes podem ser tratados como qualquer outro valor.</p>
  <p>A outra maneira de fazer referência a variáveis em outro caso é usar a função <span class="notranslate">GameMaker Language</span> <span class="inline">with()</span> , que é discutida em detalhes <a href="Language_Features/with.htm">aqui</a>:</p>
  <p class="code">// This will affect all instances of the object &quot;obj_Enemy&quot;<br />
    with (obj_Enemy)<br />
    {<br />
        target = other.parent;<br />
    }<br />
    <br />
    // This will affect one instance of the object &quot;obj_Enemy&quot;<br />
    var _enemy = instance_nearest(x, y, obj_Enemy);<br />
    if (instance_exists(_enemy)) <br />
    {<br />
        with (_enemy)<br />
        {<br />
            target.x = mouse_x;<br />
            target.y = mouse_y;<br />
        }<br />
    }
  </p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="GML_Overview.htm">Visão geral da GML</a></div>
        <div style="float:right">A seguir: <a data-xref="{title}" href="Expressions_And_Operators.htm">Expressões e Operadores</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
variables - addressing
addressing variables
-->
  <!-- TAGS
addressing_variables
-->
</body>
</html>