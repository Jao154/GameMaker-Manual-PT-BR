<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>enquanto</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the while function" />
  <meta name="rh-index-keywords" content="while" />
  <meta name="search-keywords" content="while" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>enquanto</h1>
  <p>O <span class="notranslate">GameMaker Language</span> tem uma série de formas de realizar <i>loops</i>, uma das mais importantes é o <span class="inline">while</span> <span class="notranslate">loop</span>. Esta função <span class="notranslate">loop</span> tem a forma:</p>
  <p class="code">while (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p>Aqui você tem uma <a class="glossterm" data-glossterm="declaração" href="#">declaração</a> que é iterada repetidamente com base nos resultados da avaliação de uma <a class="glossterm" data-glossterm="expressão" href="#">expressão</a>, ou seja: com um <span class="inline">while</span> <span class="notranslate">loop</span>, desde que a expressão seja avaliada para <span class="inline">true</span>, a declaração (que também pode ser um bloco de código de múltiplas declarações com colchetes <span class="inline">{}</span>) é executada. Abaixo você pode encontrar um exemplo de uma maneira típica de usar &quot;enquanto&quot;:</p>
  <p class="code">while (place_meeting(x, y, obj_Wall))<br />
    {<br />
        x -= 1;<br />
    }</p>
  <p>O código acima está verificando a colisão entre a instância chamadora e uma instância &quot;de parede&quot;, e ela realizará várias <a class="glossterm" data-glossterm="iteração" href="#">iterações</a>enquanto uma está ocorrendo - movendo a instância deixada por um pixel - até que a instância não esteja mais em colisão.</p>
  <p><strong>Quando você deve usar um <span class="inline">while</span> <span class="notranslate">loop</span>?</strong> Deve ser usado sempre que você quiser repetir uma ou mais declarações, mas não sabe realmente - ou se importa - quantas vezes deve repetir, tendo em mente que se a avaliação inicial for <span class="inline">false</span>, as declarações podem nem mesmo ser executadas.</p>
  <p>Por favor, não que você deva <strong>ser muito cuidadoso com seus laços <span class="inline">while</span> </strong>! Você pode facilmente fazer <i>infinitos</i> <span class="notranslate">loops</span>, caso em que seu jogo ficará pendurado e não reagirá mais a nenhuma entrada do usuário e precisará ser fechado à força. Por exemplo:</p>
  <p class="code">while (!place_free(x, y))<br />
    {<br />
        x = random(room_width);<br />
        y = random(room_height);<br />
    }</p>
  <p>Agora, o código acima pode funcionar bem, mas também pode causar um infinito <span class="notranslate">loop</span> se a instância não conseguir encontrar uma posição vazia para onde se mover, e isto fará com que o jogo seja suspenso. Se você se encontrar em uma posição onde este tipo de coisa é uma possibilidade, então você deve usar um tipo diferente de não bloqueio <span class="notranslate">loop</span>, ou usar uma verificação variável adicional na expressão (você pode usar múltiplas expressões junto com os<span class="glossextra">operadores</span> <a href="../Expressions_And_Operators.htm"><span class="inline">and</span> (&amp;<span class="inline">&amp;</span>)</a>, <a href="../Expressions_And_Operators.htm"><span class="inline">or</span> (<span class="inline">||</span>)</a> e <a href="../Expressions_And_Operators.htm"><span class="inline">xor</span> (<span class="inline">^^</span>)</a> para a verificação):</p>
  <p class="code">var _check = 0;<br />
    while ((!place_free(x, y)) &amp;&amp; (_check &lt; 100))<br />
    {<br />
        x = random(room_width);<br />
        y = random(room_height);<br />
        _check += 1;<br />
    }<br />
    if (_check &gt;= 100) <br />
    {<br />
        // code failed, so deal with it<br />
    }</p>
  <p>Alternativamente, você pode usar a declaração <span class="inline"><a href="break.htm">break</a></span> para sair do <span class="notranslate">loop</span>, por exemplo, o seguinte código gerará 100 números aleatórios e depois continuará, mesmo que a avaliação de <span class="inline">while</span> seja <em>sempre</em> <span class="inline">true</span>:</p>
  <p class="code">var i = 0;<br />
    while (true)<br />
    {<br />
        x[i] = random(room_width);<br />
        y[i] = random(room_height);<br />
        if ((i++) &gt;= 100)<br />
        {<br />
            break;<br />
        }<br />
    }</p>
  <p>Você também pode usar o <a href="continue.htm"><span class="notranslate">continue</span></a> declaração em um <span class="inline">while</span> <span class="notranslate">loop</span>. Usando isto terminará a atual iteração <span class="notranslate">loop</span> e reiniciará o loop novamente em uma nova iteração, por exemplo:</p>
  <p class="code">var file = file_text_open_read(&quot;Game_Data.txt&quot;);<br />
    var _num = 0;<br />
    while (!file_text_eof(file))<br />
    {<br />
        var _s = file_text_readln(file);<br />
    <br />
        if (_s == &quot;&quot;)<br />
        {<br />
            continue;<br />
        }<br />
    <br />
        str[num++] = _s;<br />
    }<br />
    <br />
    file_text_close(file);
  </p>
  <p>Este código acima abrirá um arquivo e lerá uma linha a partir dele a cada <span class="notranslate">loop</span> iteração até o final do conteúdo do arquivo. Se a linha lida for um <span class="notranslate">string</span> vazio, a atual iteração de <span class="notranslate">loop</span> é terminada usando a declaração <span class="inline">continue</span> e uma nova iteração será iniciada, caso contrário o <span class="notranslate">string</span> é adicionado a um <a href="../Arrays.htm">array</a> e a posição do array é incrementada.</p>
  <p>Para mais exemplos de funções <span class="notranslate">loop</span>, por favor veja as seções sobre <a href="repeat.htm"><span class="inline">repeat</span></a>, <a href="do___until.htm"><span class="inline">do... until</span></a>e <a href="for.htm"><span class="inline">for</span></a>.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="../Language_Features.htm">Características lingüísticas</a></div>
        <div style="float:right">A seguir: <a href="do___until.htm"><span class="notranslate">do / until</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
while
-->
  <!-- TAGS
while
-->
</body>
</html>