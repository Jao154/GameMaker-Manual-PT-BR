<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Constantes</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining the different GML constants" />
  <meta name="rh-index-keywords" content="Constants,macro,enum,pointer_invalid,pointer_null,undefined,NaN,infinity,true,false,pi" />
  <meta name="search-keywords" content="constants,macros,enums,macro,enum" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Constantes</h1>
  <p>Uma constante é um tipo de variável que é definida uma vez no início do jogo e depois nunca muda. Na verdade, os valores constantes <em>não podem ser alterados após terem sido declarados</em>. Isto os torna ideais para manter valores que são usados durante todo o jogo para identificar dados especiais.</p>
  <p>No <span class="notranslate">GameMaker Language</span> há dois tipos de constantes definidas pelo usuário: <strong>macros</strong> e <strong>enumeros</strong>, ambos explicados a seguir. Observe também que qualquer valor que seja sempre o mesmo é classificado como constante, independentemente do <a href="../Data_Types.htm">tipo de dado</a>, por exemplo, um <span class="notranslate">string</span> ou o número 3.</p>
  <p class="note"><span class="note">OBSERVAÇÃO</span> O <span class="notranslate">GameMaker Language</span> também tem uma série de valores constantes incorporados que são usados para identificar coisas específicas. Estes estão delineados nas páginas apropriadas para as funções <span class="notranslate">runtime</span> que os requerem na seção <a href="../../GML_Reference/GML_Reference.htm">Referência GML</a>.</p>
  <h2>Macros</h2>
  <p>Embora não sejam exatamente variáveis, as macros são semelhantes a elas na forma como são usadas, ou seja: são valores nomeados que você pode usar em todo o seu código para substituir valores <a class="glossterm" data-glossterm="codificado em código duro" href="#">codificados</a>. Basicamente, uma macro é uma variável nomeada que contém uma expressão. Você pode definir suas próprias macros usando o <a href="../Script_Functions.htm">Script Editor</a> e depois usá-las em seu código e ações como se fossem variáveis regulares, com a única diferença de que elas <i>não podem ser alteradas no jogo</i>.</p>
  <p>A estrutura sintáctica de uma macro é a seguinte:</p>
  <p class="code">#macro <i>&lt;variable&gt;</i> <i>&lt;expression&gt;</i></p>
  <p>Por exemplo, digamos que você defina a seguinte macro &quot;<span class="inline">total_weapons</span>&quot;:</p>
  <p class="code">#macro total_weapons 10</p>
  <p class="note_heading">Macro sintaxe...</p>
  <p class="note">A sintaxe mostrada acima deve ser usada corretamente para definir macros. Não se pode usar um sinal de igual (como nas variáveis) ou colocar um ponto-e-vírgula no final (como em uma declaração regular). Ao fazer isso, sua definição de macros se tornará inválida.<br>
    <br>
    Por exemplo, esta não é a maneira correta de definir uma macro:<br>
    <br>
   <span class="inline2">#macro total_armas = 10;</span><br>
    <br>
    A remoção do sinal de igualdade e dos dois pontos fará dela uma macro definição válida.
  </p>
  <p>Você poderia então usar isto em seu código desta maneira:</p>
  <p class="code">pos++;<br />
    <br />
    if (pos &gt;= TOTAL_WEAPONS)<br />
    {<br />
        pos = 0;<br />
    }
  </p>
  <p>Note que você não seria capaz de mudar o valor da constante, então um código como este causará o travamento do jogo:</p>
  <p class="code">total_weapons = 11;</p>
  <p>Você pode definir uma macro em qualquer lugar em seu código ou em um script e ela será <i>pré-compilada</i> e incluída em seu jogo como se estivesse lá desde o início, mas recomendamos que você crie uma <span class="notranslate">script</span> <span class="notranslate">asset</span> dedicada e defina todas as suas macros lá dentro. Será mais fácil de organizar e debugar mais tarde!</p>
  <p>Se você precisa do valor de uma macro para mudar em tempo de execução, então você provavelmente deve torná-la uma <a href="Global_Variables.htm">variável global</a>, já que estas podem ser mudadas de código durante um jogo, a menos que você configure a macro para ser uma<span> <a href="../Runtime_Functions.htm">tempo de execução </a></span> <a href="../Runtime_Functions.htm"><span class="notranslate">function</span></a>. Ao ajustar a macro a uma função, significa que esta função será chamada toda vez que você usar a macro. Por exemplo, a macro:</p>
  <p class="code">#macro col make_colour_hsv(irandom(255), 255, 255)</p>
  <p>Você então chamaria esta macro de algo parecido com isto:</p>
  <p class="code">image_blend = col;</p>
  <p>O uso deste código fará com que a imagem misture uma cor diferente cada vez que a macro for usada. Vale notar que você também pode dividir as macros em várias linhas usando o caracter <span class="inline"><span class="inline">\</span> para mostrar onde a linha quebra. Um exemplo seria algo como:</p>
  <p class="code">#macro hello show_debug_message(&quot;Hello&quot; + \<br />
    string(player_name) + \<br />
    &quot;, how are you today?&quot;);</p>
  <p>Isto é puramente cosmético, pois a divisão de uma macro como esta não terá efeito sobre o resultado da macro final quando usada, e é simplesmente para dar suporte a textos de várias linhas em macros que têm linhas de código mais longas.</p>
  <p>Uma característica muito importante das macros é que elas podem ser definidas para uso com <a href="../../../Settings/Configurations.htm">Configurações</a> específicas (configs), o que significa que você pode ter o mesmo nome de macro, mas dar-lhe valores diferentes com base na configuração selecionada atualmente. Por exemplo, digamos que você tenha uma configuração para <span class="notranslate">Android</span> Anúncios e outra para <span class="notranslate">iOS</span> Anúncios, então você poderia definir uma única macro para manter o valor de ID do aplicativo requerido:</p>
  <p class="code">#macro ad_id &quot;&quot;;<br />
    #macro Android:ad_id &quot;com.yoyogames.googlegame&quot;<br />
    #macro iOS:ad_id &quot;com.yoyogames.appstoregame&quot;</p>
  <p>Como você pode ver, primeiro você dá o nome da configuração, depois dois pontos <span class="inline">:</span> e depois o nome e o valor da macro. Note que você não pode ter nenhum espaço branco entre os dois pontos <span class="inline">:</span> e nem o nome da configuração nem o nome da macro, caso contrário, você receberá um erro.</p>
  <h2 id="enumhead">Enums</h2>
  <p>Um enumero é um &quot;enumerador&quot;, e permite essencialmente criar seu próprio tipo de dados limitado com uma lista de valores constantes, e eles têm a seguinte estrutura:</p>
  <p class="code">enum <i>&lt;variable&gt;</i><br />
    {<br />
    <i>    &lt;MEMBER&gt;</i> [= <i>&lt;VALUE&gt;</i>],<br />
    <i>    &lt;<i>MEMBER</i>&gt;</i> [= <i>&lt;<i>VALUE</i>&gt;</i>],<br />
        // etc...<br />
    }
  </p>
  <p>No exemplo a seguir, criamos um enumero para as cores do arco-íris e lhe atribuímos várias constantes e valores padrão:</p>
  <p class="code">enum rainbowcolours<br />
    {<br />
        RED,<br />
        ORANGE,<br />
        YELLOW,<br />
        GREEN,<br />
        BLUE,<br />
        INDIGO,<br />
        VIOLET<br />
    }</p>
  <p>As entradas de enumeração só podem ser <b>números inteiros</b> ou <b><span class="glossextra">expressões</span></b> com enumeração anterior que avaliam para um número inteiro, e por padrão são numeradas de 0 para cima, de modo que nosso exemplo dado acima seria o padrão para <span class="inline">red = 0</span>, <span class="inline">orange = 1</span>, <span class="inline">yellow = 2</span>, etc...</p>
  <p>Você também pode atribuir valores às variáveis do enumero no momento da criação:</p>
  <p class="code">enum enum_test<br />
    {<br />
        VAL = 10<br />
    }<br />
    <br />
    enum RAINBOW<br />
    {<br />
        RED = 5,<br />
        ORANGE = 5 * 2,<br />
        YELLOW = 15,<br />
        GREEN = 20,<br />
        BLUE = 25,<br />
        INDIGO = 30,<br />
        VIOLET = 35 * ENUM_TEST.VAL<br />
    }
  </p>
  <p>Observe no exemplo acima que usamos outro enumero para criar uma expressão para &quot;violeta&quot;. Isto só funciona se o enum a ser referenciado foi criado <i>antes do</i> enum que o está usando em uma expressão, mas não funcionará para variáveis ou funções, uma vez que o valor do enum deve poder ser avaliado como uma constante quando o projeto estiver <a class="glossterm" data-glossterm="Compilação" href="#">Compilando</a>. Observe também que todos os valores de enumeração são avaliados para valores <b>inteiros</b>, e quando você cria seus próprios valores, você deve estar ciente de que <i>somente valores inteiros são permitidos</i> para que os enumeros funcionem. Este valor pode ser qualquer número inteiro que um número de precisão duplo de ponto flutuante possa representar, inclusive valores negativos.</p>
  <p>Para acessar posteriormente o valor dentro de um determinado tipo de enumeração, você pode usar o método do ponto <span class="inline">&quot;.&quot;</span>, desta forma:</p>
  <p class="code">variable = &lt;enum_name&gt;.&lt;<em>enum_variable</em>&gt;;</p>
  <p>Como exemplo, vamos usar o enumero &quot;<span class="inline">rainbowcolours</span>&quot; que criamos no código acima:</p>
  <p class="code">colour_value = rainbowcolours.green * rainbowcolours.red;</p>
  <p>A variável <span class="inline">colour_value</span> agora teria o valor 100 (20 * 5).</p>
  <p>Observe que você <em>não pode </em>modificar os valores de nenhuma constante de enumeração após sua criação, da mesma forma que não pode modificar as macros após elas terem sido criadas.</p>
  <p class="note"><strong>NOTA</strong>: Os valores Enum são armazenados como <span class="notranslate">int64s</span>, portanto, a execução <span class="inline"><a href="../../GML_Reference/Variable_Functions/is_real.htm">is_real()</a></span> sobre eles retornará <span class="inline">false</span>.</p>
  <p> </p>
  <h2>Constantes Incorporadas</h2>
  <p>A tabela a seguir mostra uma lista das constantes incorporadas que podem ser devolvidas por algumas funções e operações em seus projetos:</p>
  <table>
    <tbody>
      <tr>
        <th>Constante</th>
        <th>Descrição</th>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">pointer_null</span></td>
        <td>Esta constante indica que o ponteiro não está apontando para nada significativo (o mesmo que<span> </span><span class="inline">NULL</span> <span> </span> em C++ ou <span class="inline">null</span> em C#).<br>
          Este valor é <a class="glossterm" data-glossterm="falso" href="../Data_Types.htm#">falso</a>.</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">pointer_invalid</span></td>
        <td>Esta constante significa simplesmente que o valor não é um ponteiro válido</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">undefined</span></td>
        <td>Esta constante é devolvida quando uma função tem que devolver <em>algo</em>, mas não tem nenhum valor apropriado ou &quot;correto&quot; para retornar.<br>
          Este valor é <a class="glossterm" data-glossterm="falso" href="../Data_Types.htm#">falso</a>.</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">NaN</span></td>
        <td><span>Esta constante que pode ser retornada quando o compilador não pode avaliar os resultados de uma operação como um número - por exemplo, 0 / 0 não pode ser definida como um número real, e é, portanto, representada por </span><span class="inline">NaN</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">infinity</span></td>
        <td><span class="inline"><span data-highlight-container="true"><span data-highlight="true">
                <font face="open_sansregular"><span style="font-size: 18px; font-weight: 400;">This constant </span>
              <span>refere-se a um número considerado infinito, tal como o resultado que você obteria ao dividir qualquer valor de ponto flutuante por zero, por exemplo: 1,0/0.</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">true</span></td>
        <td>Esta constante representa o valor 1, que é o que <span data-keyref="GameMaker Name">o GameMaker</span> avaliará como um &quot;verdadeiro&quot; booleano (note que qualquer valor igual ou maior que 1 será avaliado como <span class="inline">true</span>).</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">false</span></td>
        <td>Esta constante representa o valor 0, que é o que <span data-keyref="GameMaker Name">o GameMaker</span> avaliará como um &quot;falso&quot; booleano (note que qualquer valor menor ou igual a 0 será avaliado como <span class="inline">false</span>).</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">pi</span></td>
        <td>Esta constante representa o valor de pi: 3,141592653589793280 etc... embora o valor exato dependerá de vários fatores como o sistema operacional ou a plataforma a ser visada.</td>
      </tr>
    </tbody>
  </table>
  <p>Consulte a <a data-xref="{text}" href="../../../Additional_Information/Type_Tables.htm#h">Tabela de Igualdade</a> para obter informações sobre comparações de igualdade para algumas das constantes listadas acima.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="../Variables_And_Variable_Scope.htm">Variáveis e Escopo de Variáveis</a></div>
        <div style="float:right">A seguir: <a href="Local_Variables.htm">Variáveis locais</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
constants
macros
enums
macro
enum
-->
  <!-- TAGS
constants
macro
enum
-->
</body>
</html>