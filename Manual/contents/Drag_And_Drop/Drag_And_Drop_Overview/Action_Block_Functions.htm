<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Funções do Action Block Script</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Article explaining how to make action block script functions" />
  <meta name="rh-index-keywords" content="GML Visual Overview - Action Block Script Functions" />
  <meta name="search-keywords" content="GML Visual Scripts" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Funções do Action Block Script</h1>
  <p>Um dos mais importantes <span class="notranslate">assets</span> do <a href="../../Introduction/The_Asset_Browser.htm">Navegador de Ativos</a> é o <a href="../../The_Asset_Editors/Scripts.htm">Script</a> <span class="notranslate">asset</span>. <span class="notranslate">Scripts</span> são especiais <span class="notranslate">assets</span> no sentido de serem essencialmente &quot;containers&quot; para funções definidas pelo usuário e não são eles mesmos chamados por você diretamente em seus jogos. Todos <span class="notranslate">scripts</span> são <strong>globais</strong> no escopo e serão executados automaticamente por <span class="notranslate">GameMaker</span> quando seu jogo começar, assim você pode usá-los para definir variáveis e funções globais que você deseja usar durante todo o jogo.</p>
  <p>Cada <span class="notranslate">GML</span> Visual <span class="notranslate">script</span> pode ter uma ou mais funções definidas pelo usuário, e estas funções são criadas usando a ação <a href="../Drag_And_Drop_Reference/Common/Declare_A_New_Function.htm">Declare A New Function</a>:</p>
  <p><img>As funções que você definir aqui serão globais no escopo e agirão como qualquer ação visual integrada <span class="notranslate">GML</span>, ou seja: podem tomar valores diferentes - ou nenhum - chamados de<span class="glossextra">argumentos</span> (ou parâmetros), e então executar uma tarefa, retornando um valor ou não retornando nada como requerido. Você então chamaria a função em seus jogos usando a ação <a href="../Drag_And_Drop_Reference/Common/Function_Call.htm">Chamada de Função</a> <img>, que se parece com isto:</p>
  <p><img>Para criar um <span class="notranslate">GML</span> Visual <span class="notranslate">script</span>, basta usar o botão direito do mouse <img> em qualquer lugar do <span class="notranslate">Asset</span> Browser e selecionar <strong>Criar </strong>então <strong>Script</strong>. Isto criará um novo <span class="notranslate">GML</span> Visual <span class="notranslate">script</span> e abrirá a janela do editor:</p>
  <p><img>Você pode nomear o <span class="notranslate">script</span> clicando com o botão direito do mouse <img> sobre ele no Navegador <span class="notranslate">Asset</span> e selecionando <strong>Renomear </strong>(ou usando um duplo clique lento à esquerda <img>), mas observe que o nome <span class="notranslate">script</span> deve estar de acordo com as regras gerais para <span class="notranslate">assets</span>, então eles devem começar com uma letra e conter apenas letras, números ou o símbolo &quot;_&quot; abaixo da barra. Seu <span class="notranslate">script</span> também será pré-povoado com uma ação <strong>Declarar uma nova função</strong>, pronta para você preenchê-la, e você pode adicionar mais declarações de função conforme necessário (um único <span class="notranslate">script</span> pode conter várias funções, o que é útil para agrupar funções com uso similar ou conectado em conjunto).</p>
  <p>Como mencionado acima, você pode passar uma série de argumentos para uma função, e ela os utilizará para realizar a tarefa para a qual você a escreveu. Para entender isso melhor, tome - por exemplo - qualquer uma das ações embutidas e pense em como ela funciona... você a coloca em um evento e fornece uma série de valores e ela fará com que sua instância faça algo. As funções definidas pelo usuário são exatamente as mesmas, sendo que a única diferença é que <em>você </em>as escreve.</p>
  <p>Ao definir uma nova função, você dá a ela um nome e também define o nome de quaisquer argumentos que ela tome, se ela tomar algum (as funções não podem tomar argumentos ou argumentos múltiplos, dependendo do que você precisar). Se você der nomes de argumentos, estes serão usados nas ações que a função chama como <strong>variáveis locais </strong>contendo os valores de entrada da função.</p>
  <p>Também é uma boa prática acrescentar em um comentário para a ação que explique o que ela faz, seguindo as <a href="../../The_Asset_Editors/Code_Editor_Properties/JSDoc_Script_Comments.htm">regras do documento do JS</a>. Por exemplo, considere esta função <span class="inline">set_vec()</span>:</p>
  <p><img>Para chamar o <span class="notranslate">script</span> acima você simplesmente usaria a ação <strong>Call Function</strong>, como esta:</p>
  <p><img>Você não só pode passar argumentos para uma função, mas também pode pedir a uma função que devolva um valor (usando a ação <a href="../Drag_And_Drop_Reference/Common/Return.htm">Return</a> <img> ), para que você possa usá-los (por exemplo) para construir métodos de cálculo ou devolver uma identificação de instância após uma detecção de colisão complexa ou qualquer número de coisas. Observe, entretanto, que o uso do Return <strong>termina a função</strong> e, portanto, nenhuma ação colocada após o seu uso será executada, e isto significa que uma certa quantidade de pensamento tem que ir para a forma como suas funções são estruturadas.</p>
  <p>Abaixo está uma função visual <span class="notranslate">GML</span> que retorna um valor:</p>
  <p><img alt="Declare A New Function Syntax" class="center" src="../../assets/Images/Scripting_Reference/Drag_And_Drop/Reference/Common/a_Common_Declare_Function.png" /></p>
  <p>A função acima simplesmente verifica todas as instâncias em um <span class="notranslate">room</span> para ver qual é seu <span class="inline">object_index</span> e se uma delas for o jogador <span class="notranslate">object</span> a função retornará <span class="inline">true</span> (terminando a chamada de função) ou <span class="inline">false</span>. Você chamaria esta função desta forma:</p>
  <p><img>Então, chamamos a função e fazemos com que ela crie uma variável temporária (local) para armazenar o valor retornado (que neste caso é <span class="inline">true</span> ou <span class="inline">false</span>), e então esta variável é verificada e uma ação é tomada.</p>
  <p>Você também pode tornar os argumentos opcionais e definir um valor padrão, assim, caso eles não sejam fornecidos em uma chamada de função, o valor padrão será usado em seu lugar. Veja o <a data-xref="{text}" href="../Drag_And_Drop_Reference/Common/Declare_A_New_Function.htm#h">Exemplo Ampliado 2</a> da ação para mais informações.</p>
  <p>Ao criar funções para seu <span class="notranslate">GML</span> Visual <span class="notranslate">scripts</span> você pode usar todas as mesmas ações que usaria ao adicionar ações em um evento <span class="notranslate">object</span>, e você pode até mesmo chamar funções de dentro das funções, e desta forma criar mais código de ação &quot;modular&quot;. Construir <span class="notranslate">scripts</span> com funções desta forma pode economizar muito tempo criando a mesma ação <span class="notranslate">sequences</span> e também pode ajudar a tornar sua ação <span class="notranslate">sequences</span> mais fácil de ler e mais fácil de depurar.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="../../Content.htm">Índice</a></div>
        <div style="float:right">A seguir: <a href="Changing_DnD_To_Code.htm">Mudando <span class="notranslate">GML</span> Visual To Code</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
GML Visual Scripts
-->
  <!-- TAGS
drag_and_drop_scripts
-->
</body>
</html>