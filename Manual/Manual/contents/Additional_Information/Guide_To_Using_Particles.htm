<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Guia para o uso de partículas</title>
    <meta name="generator" content="Adobe RoboHelp 2020" />
    <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
    <script src="../assets/scripts/main_script.js"></script>
    <meta name="rh-authors" content="Mark Alexander" />
    <meta name="topic-comment" content="Page that explains how to set up and use particles" />
    <meta name="rh-index-keywords" content="Guide To Using Particles" />
    <meta name="search-keywords" content="particles,particle guide,particle setup" />
  </head>
  <body><!--<div class="body-scroll" style="top: 150px;">-->
    <h1>Guia para o uso de partículas</h1>
    <p>Este guia é para aqueles de vocês que querem entender como usar e criar <strong>partículas</strong>. Esta página cobrirá tanto as <a href="../GameMaker_Language/GML_Reference/Drawing/Particles/Particles.htm">funções da linguagem GameMaker</a> quanto as <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Particles/Particle_Actions.htm">ações visuais do GML</a> para partículas, portanto, se você nunca usou partículas antes, esperamos que este guia possa ajudá-lo a começar, pois elas são muito úteis e bastante divertidas de se fazer.</p>
    <p>Antes de ir mais longe, provavelmente devemos explicar o que é realmente uma partícula. Basicamente, uma partícula é um recurso gráfico que tem certas propriedades que são definidas por um <strong>sistema de partícula</strong>. Estas propriedades não podem ser manipuladas diretamente para partículas <em>individuais </em>, mas são alteradas coletivamente através do código ou ações que são usadas para definir o sistema ao qual ela pertence. Elas são muito úteis para criar efeitos bonitos e cintilantes - ou sutis e discretos - em um jogo sem a sobrecarga de CPU que o uso de instâncias tem.</p>
    <p>Mencionamos os sistemas de partículas, então vamos explicar o que é isso antes de continuar. Pense em um sistema de partículas como um recipiente que você usará para manter suas partículas prontas para uso. Você pode usar código ou ações para definir o aspecto visual das partículas, e então elas são colocadas no &quot;container&quot; (o sistema de partículas) para que você possa retirá-lo e usá-lo quando e onde mais tarde precisar dele.</p>
    <p>Antes de montar um sistema e criar partículas, é importante saber algumas coisas... Primeiro é que a maioria do código de um sistema de partículas é <strong>chamado apenas uma vez no jogo</strong>, geralmente em algum tipo de controlador <span class="notranslate">object</span> no primeiro <span class="notranslate">room</span> ou nível - este não é sempre o caso, mas por uma questão de simplicidade, estaremos usando este cenário para o guia breve a seguir, pois é a forma mais comum de usar partículas. Você faz isto porque um sistema de partículas, uma vez criado, permanece na memória e está pronto para ser usado a qualquer momento, portanto, se você o criar mais de uma vez, pode aumentar rapidamente o uso da memória e causar sérios atrasos, e até mesmo tem o potencial de travar o jogo. Por uma questão de simplicidade neste guia, você fará um sistema <strong>global </strong>de partículas que pode ser usado por qualquer instância do jogo a qualquer momento.</p>
    <p> </p>
    <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Criando um Sistema de Partículas</a></p>
    <div class="droptext" data-targetname="drop-down">
      <p class="dropspot">Para começar, você precisa definir o sistema de partículas e dar-lhe um nome para que você possa usá-lo. Como este será um sistema global que qualquer <span class="notranslate">object</span> pode usar, você o faria em um controlador <span class="notranslate">object</span> ou em uma função de inicialização executada no início do jogo. O <span class="notranslate">GML</span> teria este aspecto:</p>
      <p class="code">global.P_System = part_system_create_layer(&quot;Instance_Layer&quot;, false);</p>
      <p class="dropspot">E usando <span class="notranslate">GML</span> Visual:</p>
      <p class="dropspot"><img>Observe que o nome da camada fornecida deve ser uma camada válida no <span class="notranslate">room</span> onde o sistema será utilizado, caso contrário, não serão visíveis partículas. Observe também que definimos o <span class="notranslate">flag</span> &quot;persistente&quot; (tanto em código como em <span class="notranslate">GML</span> Visual) como falso. Um sistema de partículas persistentes é aquele que &quot;persistirá&quot; em <span class="notranslate">rooms</span> sem a necessidade de destruí-lo e recriá-lo para cada <span class="notranslate">room</span>. Entretanto, para manter as coisas simples para este guia, não estaremos usando a persistência.</p>
      <p class="dropspot">Então esse é o sistema criado, mas e quanto às partículas? Temos que defini-las também ou o sistema é inútil e não faz nada.</p>
      <p class="dropspot"> </p>
    </div>
    <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Definição de um tipo de partícula</a></p>
    <div class="droptext" data-targetname="drop-down1">
      <p class="dropspot">Para utilizar uma partícula em um sistema, é preciso primeiro definir suas propriedades gerais. Estas são como as propriedades <span class="notranslate">object</span>, mas se aplicam apenas de forma <em>geral </em>às partículas individuais. Isto significa que se você der às partículas uma velocidade mínima de movimento de 1 e uma velocidade máxima de movimento de 2, qualquer partícula criada pelo sistema terá uma velocidade aleatória entre 1 e 2 pixels por passo, e que, no geral, elas terão uma velocidade média de 1,5. Você deve nomear e adicionar sua primeira partícula ao sistema usando o seguinte <span class="notranslate">GML</span> no mesmo <span class="notranslate">object</span> que você usou para criar o sistema:</p>
      <p class="code">global.Particle1 = part_type_create();</p>
      <p class="dropspot">E para aqueles de vocês que utilizam <span class="notranslate">GML</span> Visual:</p>
      <p class="dropspot"><img>Note que usando <span class="notranslate">GML</span> Visual, também assinalamos a opção de <strong>mistura </strong>. Isto permite uma <strong>mistura aditiva</strong> para a partícula, que discutiremos um pouco mais abaixo.</p>
      <p class="dropspot">Agora você tem um sistema e uma partícula para colocar nele, mas ainda não está pronto para criar seus efeitos extraordinários! Você ainda tem que definir as propriedades da partícula, ou seja: como ela se parece - sua velocidade, sua rotação, seu alfa, etc... Há muitos detalhes que podem ser usados para definir um efeito de partícula, portanto, abaixo está uma visão geral das configurações mais importantes e depois um trecho de código e <span class="notranslate">GML</span> Visual que usa todas elas:</p>
      <ul class="dropspotlist">
        <li class="dropspot"><strong>forma</strong>: A forma da partícula é a construída em <span class="notranslate">sprite</span> que utilizará, sendo o padrão a constante <span class="inline">pt_shape_pixel</span>. Há também uma função para adicionar uma partícula personalizada, se necessário. <a href="../GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_sprite.htm"><span class="inline">part_type_sprite()</span></a> - ou a ação <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Particles/Set_Particle_Sprite.htm">Set Particle Sprite</a>.</li>
        <li class="dropspot"><strong>tamanho</strong>: Estabelece os parâmetros de tamanho para o tipo de partícula. Especifica o tamanho inicial mínimo, o tamanho inicial máximo e o aumento do tamanho em cada etapa (use um número negativo para uma diminuição no tamanho). Este é um valor escalar que modificará igualmente a escala x/y da imagem base.</li>
        <li class="dropspot"><strong>cor</strong>: Define a cor da partícula se for usada uma única cor. Se forem fornecidas duas ou três cores, esta será a mistura de cores, misturando de uma a outra ao longo de sua vida útil.</li>
        <li class="dropspot"><strong>alfa</strong>: Define o valor alfa para a partícula entre um valor de 0 e 1. Se um único valor for passado neste será o alfa da partícula, se dois ou três valores forem passados, então o alfa se misturará entre eles ao longo da vida útil da partícula.</li>
        <li class="dropspot"><strong>velocidade</strong>: Define as propriedades de velocidade para o tipo de partícula. Você especifica uma velocidade mínima e máxima e um valor aleatório entre os limites dados é escolhido quando a partícula é criada. Você pode indicar um aumento de velocidade em cada etapa, e até mesmo usar um número negativo para diminuir a partícula (a velocidade nunca será menor que 0).</li>
        <li class="dropspot"><strong>direção</strong>: Define as propriedades de direção para o tipo de partícula. Novamente especifica uma faixa de direções (em graus no sentido anti-horário - 0 indica um movimento para a direita, 90 indica um movimento para cima, etc...). Por exemplo, para deixar a partícula se mover em uma direção aleatória você escolheria como valores um mínimo 0 e um máximo de 360. Você também pode especificar um aumento na direção para cada passo (também pode ser negativo).</li>
        <li class="dropspot"><strong>orientação</strong>: Define as propriedades do ângulo de orientação para o tipo de partícula. Especifica o ângulo mínimo, o ângulo máximo, e o aumento em cada passo. Você também pode indicar se o ângulo dado deve ser relativo à direção atual do movimento ou absoluto, por exemplo: definindo todos os valores como 0, mas relativos à verdade, a orientação da partícula seguirá precisamente o <span class="notranslate">path</span> da partícula.</li>
        <li class="dropspot"><strong>mistura</strong>: Define se usar mistura <strong>aditiva </strong>ou mistura <strong>normal </strong>para o tipo de partícula. Isto é definido em uma função ao usar <span class="notranslate">GML</span> e como parte da inicialização de partículas ao usar <span class="notranslate">GML</span> Visual. Mistura aditiva significa que as partículas usarão o modo de mistura <span class="inline">bm_add</span>, dando-lhes um aspecto &quot;brilhante&quot; onde se sobrepõem, e também misturando-as com qualquer coisa desenhada por baixo (<span class="notranslate">sprites</span>, fundos, <span class="notranslate">tiles</span>, etc...) - muito útil para efeitos de fogo e mágicos (por exemplo), mas melhor deixar para algo como fumaça. Experimente para ver as diferenças! Note que, ao permitir isso, quebrará a <span class="notranslate">texture</span> quando as partículas forem criadas, e assim mais lotes serão necessários por passo para desenhá-las - algo a ser considerado, já que pode afetar o desempenho, especialmente em celulares.</li>
        <li class="dropspot"><strong>vida</strong>: Define os limites de vida útil, em etapas (armações de jogo) para o tipo de partícula. Como as configurações anteriores, isto tem um valor mínimo e máximo e as partículas durarão um número aleatório de etapas dentro destes valores. Assim, uma vida útil de 30 min e 30 max terá a partícula existente por exatamente 30 etapas, mas uma vida útil de 20 min e 60 max terá cada partícula existente por um número aleatório de etapas entre 20 e 60.</li>
      </ul>
      <p class="dropspot">Agora, antes de apresentarmos o código para definir a partícula, vamos falar por um momento sobre &quot;<strong>agitar</strong>&quot;... Acredite ou não, &quot;sacudir&quot; é uma propriedade da partícula e pode ser definida para muitas das configurações acima individualmente. Quando você vê &quot;agitar&quot; como um argumento para uma função ou ação da partícula, significa que se você colocar um número entre 1 e 20, a partícula &quot;agitará&quot; ou flutuará entre os valores mínimo e máximo da propriedade, sendo que 1 é um agitar lento e 20 é muito rápido. Assim, uma velocidade de partícula mínima de 2 e máxima de 5 com um agitar de 20 oscilará muito rapidamente entre as velocidades mín/máx para a vida útil de cada partícula criada.</p>
      <p class="note"><strong>NOTA</strong>: Há outras propriedades de partículas menores também que não cobrimos aqui, apenas para manter as coisas tão simples quanto possível para começar. Consulte as páginas apropriadas para obter detalhes completos sobre as propriedades das partículas.</p>
      <p class="dropspot">Vejamos agora algum código que define uma partícula:</p>
      <p class="code">// This defines the particle&#39;s shape
        <br/>
        part_type_shape(global.Particle1,pt_shape_pixel);
        <br/>
        <br/>
        // This is for the size
        <br/>
        part_type_size(global.Particle1,1,1,0,2);
        <br/>
        <br/>
        // This sets its colour. There are three different codes for this
        <br/>
        part_type_color1(global.Particle1,c_white);
        <br/>
        <br/>
        // This is its alpha. There are three different codes for this
        <br/>
        part_type_alpha1(global.Particle1,1);
        <br/>
        <br/>
        // The particles speed
        <br/>
        part_type_speed(global.Particle1,0.50,2,-0.10,0);
        <br/>
        <br/>
        // The direction
        <br/>
        part_type_direction(global.Particle1,0,359,0,20);
        <br/>
        <br/>
        // This changes the rotation of the particle
        <br/>
        part_type_orientation(global.Particle1,0,0,0,0,true);
        <br/>
        <br/>
        // This is the blend mode, either additive or normal
        <br/>
        part_type_blend(global.Particle1,1);
        <br/>
        <br/>
        // This is its lifespan in steps
        <br/>
        part_type_life(global.Particle1,5,30); </p>
      <p class="dropspot">Para criar esta mesma definição de partícula em <span class="notranslate">GML</span> Visual, precisaríamos destas ações:</p>
      <p class="dropspot"><img>Então é isso! Agora definimos nossas partículas e elas estão prontas para serem usadas.</p>
      <p class="dropspot"> </p>
    </div>
    <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">Criação de partículas diretamente no jogo</a></p>
    <div class="droptext" data-targetname="drop-down2">
      <p class="dropspot">Há algumas maneiras de criar partículas, e cada uma tem seus prós e contras. Você pode usar <strong>emissores</strong> para <strong>explodir </strong>ou <strong>transmitir </strong>partículas, ou pode criar partículas <strong>diretamente </strong>em um ponto. Qual delas você usa realmente depende do que você está tentando alcançar e do efeito que você quer criar, mas vamos começar com a mais fácil das duas, que é criar partículas diretamente. Em <span class="notranslate">GML</span>, usaríamos a seguinte função:</p>
      <p class="code">part_particles_create(global.P_System, x, y, global.Particle1, 10);</p>
      <p class="dropspot">e em <span class="notranslate">GML</span> visual seria:</p>
      <p class="dropspot"><img>Esse único código/ação acima criará 10 partículas nas coordenadas x/y dadas do tipo &quot;Particle1&quot; de nosso sistema global. Simples! O ótimo dessa linha de código/ação é que ela pode ser usada em qualquer lugar sem qualquer confusão. Por exemplo, se você colocá-lo no evento <strong>Global Left Pressed</strong> para o mouse em um <span class="notranslate">object</span> e alterar os valores x/y para a posição mouse_x/y, ele criará partículas na posição do mouse toda vez que você apertar o botão. Ou se você tiver um foguete, então você poderia colocá-lo no evento do passo e ter partículas de fumaça chegando a cada passo (embora 1 ou 2 provavelmente seria melhor do que 10!). Você pode até mesmo fazê-lo criar partículas sobre uma área alterando as coordenadas x/y aleatoriamente, por exemplo:</p>
      <p class="code">repeat(50)
        <br/>
        {
        <br/>
        var xx = x + 20 - random(40);
        <br/>
        var yy = y + 20 - random(40);
        <br/>
        part_particles_create(global.P_System, xx, yy, global.Particle1, 1);
        <br/>
        }</p>
      <p class="dropspot"><img>O código acima criará 50 partículas em uma posição aleatória dentro de uma área quadrada de 40px.</p>
      <p class="dropspot"> </p>
    </div>
    <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">Criando Partículas com Emissores</a></p>
    <div class="droptext" data-targetname="drop-down3">
      <p class="dropspot">Já que explicamos a maneira fácil de criar partículas, vamos agora pela maneira um pouco mais complexa, que é usar <strong>emissores</strong>. Os emissores são outra parte do sistema de partículas que tem que ser definida antes de ser usada, então faremos um emissor global o mesmo que fizemos para o sistema e as partículas. Também temos que decidir se temos ou não um emissor estático (não móvel) e se vamos <strong>estourar </strong>ou <strong>fazer o fluxo </strong>das partículas, bem como decidir sobre que área e que tipo de distribuição vamos ter o uso do emissor.</p>
      <p class="dropspot">O que tudo isso significa? Bem, um emissor <strong>estático </strong>é aquele que você pode definir uma vez e esquecer, pois não se moverá para nenhum lugar durante o jogo, ou seja: pense em um fogo de tronco - ele não se move, apenas emite chamas e também estático, mas uma bola de fogo exigiria um emissor <strong>dinâmico</strong> e se moverá através da tela. Quanto ao estouro ou fluxo, um estouro é uma explosão de partículas, enquanto que um fluxo é exatamente isso - um fluxo constante de partículas a cada passo. Para área e distribuição, com emissores você pode definir uma área para emissão de partículas (que pode ser um retângulo, elipse, diamante ou linha), bem como a curva de distribuição (gaussiana, gaussiana inversa, ou linear).</p>
      <p class="dropspot">As imagens a seguir ilustram os diferentes tipos de formato de área disponíveis para os emissores:</p>
      <p class="dropspot"> </p>
      <center><img alt="Create Particle System" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_CreateSystem.png"/> <img alt="Create Particle Type" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Create_Type.png"/></center>
      <center><img alt="Define Particle Type" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Define_Particle.png"/> <img alt="Create Particles At A Position" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Burst.png"/></center>
      <p class="dropspot">
        <br>
        E as curvas de distribuição (linear, gaussiana e gaussiana inversa) são ilustradas aqui:</p>
      <p><img alt="Create Particles Over A Random Area" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Create_Particles.png"/></p>
      <p class="dropspot">Abaixo está um exemplo do código/ações necessárias para definir dois emissores, o que normalmente seria feito no <strong>evento Create Event</strong> of a controller <span class="notranslate">object</span>, logo após a definição do sistema de partículas. Um será estático e transmitirá partículas sobre a área de todo o <span class="notranslate">room</span>, enquanto o outro será dinâmico e seguirá o mouse e estourará a cada 30 passos a partir de uma pequena elipse:</p>
      <p> </p>
      <p class="code">global.Particle1_Emitter1 = part_emitter_create(global.P_System);
        <br/>
        global.Particle1_Emitter2 = part_emitter_create(global.P_System);
        <br/>
        <br/>
        // Set up the area that will emit particles
        <br/>
        part_emitter_region(global.P_System, global.Particle1_Emitter1, 0, room_width, 0, room_height, ps_shape_rectangle, ps_distr_linear);
        <br/>
        part_emitter_region(global.P_System, global.Particle1_Emitter2, mouse_x-10, mouse_x+10, mouse_y-10, mouse_y+10, ps_shape_ellipse, ps_distr_gaussian);
        <br/>
        <br/>
        // Set the first to stream 10 particles every step
        <br/>
        part_emitter_stream(global.P_System, global.Particle1_Emitter1, global.Particle1, 10);
        <br/>
        <br/>
        // This can now be forgotten as it will function until told to stop...
        <br/>
        // Set the alarm[0] event to burst the emitter2 particles...
        <br/>
        alarm[0] = 30; </p>
      <p class="dropspot"><img>Portanto, aqui estamos criando dois emissores de partículas que são atribuídos ao sistema de partículas que criamos no início. As funções/ações para criar estes emissores nos permitem definir uma área no <span class="notranslate">room</span> sobre a qual eles emitirão partículas, bem como dar o tipo de partícula a emitir, e a forma e distribuição a usar dentro da área definida. As funções/ações retornarão um valor numérico, que é o valor de identificação do emissor, e nós o armazenamos em uma variável para que possamos usar outras funções emissoras para visar esses emissores.</p>
      <p class="dropspot">Agora temos código/GML Visual para transmitir partículas (estas partículas serão emitidas a cada passo do jogo sem que tenhamos que fazer mais nada), mas também queremos adicionar um <strong>Evento</strong> de<strong>Alarme[0]</strong> para que as partículas rebentem em intervalos específicos:</p>
      <p class="code">part_emitter_region(global.P_System, global.Particle1_Emitter2, mouse_x - 10, mouse_x + 10, mouse_y - 10, mouse_y + 10, ps_shape_ellipse, ps_distr_gaussian);
        <br/>
        part_emitter_burst(global.P_System, global.Particle1_Emitter2, global.Particle1, 30);
        <br/>
        alarm[0] = 30;</p>
      <p class="dropspot"><img>A explosão de uma partícula é simplesmente uma explosão única de partículas do emissor, em vez de um fluxo constante delas a cada passo do jogo.</p>
      <p class="dropspot">Mas e se você quiser que várias <span class="notranslate">objects</span> emitam partículas? Um emissor global só pode estar em um lugar de cada vez, então você precisaria criar emissores <em>locais </em>em cada <span class="notranslate">object</span>. Estes emissores ainda usarão o sistema global de partículas e quaisquer partículas que estejam dentro dele, mas eles podem ter formas e tamanhos diferentes e se mover com o <span class="notranslate">object</span>, tornando-os ideais para foguetes, balas ou coisas. O código que você usaria é exatamente o mesmo que o anterior, mas sem o prefixo &quot;global&quot; antes dos nomes dos emissores.</p>
      <p class="dropspot">É a criação de partículas tratadas, mas há mais uma coisa que é muito importante... A limpeza quando se termina com elas.</p>
      <p class="dropspot"> </p>
    </div>
    <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">Limpeza</a></p>
    <div class="droptext" data-targetname="drop-down4">
      <p class="dropspot">Como mencionado no início, uma vez criado, um sistema de partículas (e suas partículas, emissores, etc...) são armazenadas na memória para uso imediato. Ótimo, mas o que acontece quando se reinicia o jogo? Ou se seu jogador morrer e começar o <span class="notranslate">room</span> novamente? Bem, se você não administrar bem o jogo, você terá um <strong>vazamento de memória</strong>. Isto é quando algo foi criado e usa a memória, mas foi &quot;desreferenciado&quot;, o que significa que <span class="notranslate">GameMaker</span> não tem mais acesso a ele. Este tipo de coisa devorará lentamente a memória e causará atraso em seu jogo ou até mesmo bloquear o computador causando o travamento de seu jogo, e é um problema bastante comum com usuários de sistemas de partículas pela primeira vez.</p>
      <p class="dropspot">Como você evita isso? Bem, o <span data-keyref="GameMaker Name">GameMaker</span> tem <span class="notranslate">GML</span> Funções de código e <span class="notranslate">GML</span> Ações visuais para excluir sistemas de partículas e seus emissores e partículas da memória quando não estão em uso, e com um pouco de planejamento ao usar o seguinte código/ações, você pode facilmente evitar este problema potencial.</p>
      <p class="dropspot">A primeira coisa que você tem que fazer é decidir onde você vai criar o sistema e como vai utilizá-lo. Você poderia criar um sistema global no <strong>evento inicial do jogo</strong> de um <span class="notranslate">object</span> que está em seu primeiro <span class="notranslate">room</span> (como um menu ou uma tela de título), mas isto significa que se você reiniciar o jogo usando o <a href="../GameMaker_Language/GML_Reference/General_Game_Control/game_restart.htm"><span class="inline">game_restart()</span></a> função, ela será recriada e causará um vazamento de memória. Ou você poderia criar um sistema local em qualquer <span class="notranslate">room</span>, mas novamente, se você deixar o <span class="notranslate">room</span>, o sistema será inacessível e causará um vazamento de memória. Para evitar isso, você precisaria ter algo assim no <a href="../The_Asset_Editors/Object_Properties/Other_Events.htm"><strong>Evento de Fim de Jogo</strong></a> ou o <a href="../The_Asset_Editors/Object_Properties/Object_Events.htm"><strong>Evento de limpeza</strong></a> de seu objeto:</p>
      <p class="code">part_type_destroy(global.Particle1);
        <br/>
        part_emitter_destroy(global.P_System, global.Particle1_Emitter);
        <br/>
        part_emitter_destroy(global.P_System, global.Particle2_Emitter);
        <br/>
        part_system_destroy(global.P_System);</p>
      <p class="dropspot"><img>Isso removerá as partículas definidas, os emissores e, em seguida, o sistema da memória pronto para que você reinicie o jogo ou mude <span class="notranslate">room</span>. Basta lembrar que depois de pensar onde seria o lugar mais adequado para criar o sistema, pense em onde seria o lugar mais adequado para destruir o sistema também!</p>
      <p class="dropspot"> </p>
    </div>
    <p> </p>
    <p>Agora você sabe o básico sobre partículas, sistemas de partículas e emissores, então agora você pode adicioná-los ao seu jogo! Mas antes de se apressar e adicionar efeitos de partículas a tudo, observe que embora as partículas tenham menos fome de CPU que as instâncias, elas não são a solução para tudo, pois causarão atraso se você tiver milhares delas de cada vez. A melhor coisa a fazer é experimentar e usá-las com cuidado para &quot;dar um toque de carne&quot; visualmente a um jogo e dar-lhe um pouco mais de cordialidade sem exagerar.</p>
    <p> </p>
    <p> </p>
    <div class="footer">
      <div class="buttons">
        <div class="clear">
          <div style="float:left">Voltar: <a href="Additional_Information.htm">Informações adicionais</a></div>
          <div style="float:right">A seguir: <a href="Guide_To_Using_Shaders.htm">Guia para o uso de Shaders</a></div>
        </div>
      </div>
      <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos os direitos reservados</span></h5>
    </div>
    <!-- KEYWORDS
Vectors
Vector Maths
--><!-- TAGS
vector_maths
--></body>
</html>