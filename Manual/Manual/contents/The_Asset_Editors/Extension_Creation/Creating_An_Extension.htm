<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Criando uma extensão</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing how to create a generic extension" />
  <meta name="rh-index-keywords" content="Extensions - Creating An Extension" />
  <meta name="search-keywords" content="creating extensions" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Criando uma extensão</h1>
  <p>Para criar um <span class="notranslate">extension</span>, primeiro você precisará clicar com o botão direito do mouse em <img> em qualquer lugar dentro do <a href="../../Introduction/The_Asset_Browser.htm">Navegador de Ativos</a> e selecionar <strong>Criar -&gt; Extensão</strong>. Isto abrirá as propriedades <span class="notranslate">Extension</span> para seu recém-criado <span class="notranslate">asset</span> no espaço de trabalho:</p>
  <p><img>Se você não vir isto, pode clicar duas vezes em seu <span class="notranslate">Extension</span> <span class="notranslate">asset</span> no navegador <span class="notranslate">Asset</span> para abrir sua janela de propriedades ou para se concentrar nela quando já estiver aberta.</p>
  <p>Isto agora está pronto para você adicionar os arquivos e funções necessárias, e você também pode dar ao <span class="notranslate">extension</span> um nome aqui (seguindo a convenção usual de apenas letras/números e nenhum símbolo especial, exceto o sublinhado &quot;_&quot;). Você também pode definir o número da versão para o <span class="notranslate">extension</span>, caso deseje.</p>
  <p>Em &quot;Copies To&quot; você pode escolher as plataformas para as quais este <span class="notranslate">extension</span> é exportado. Para um simples <span class="notranslate">GML</span> <span class="notranslate">extension</span> você não precisa se preocupar com isso, pois ele será executado em todas as plataformas, porém se você estiver criando uma plataforma específica <span class="notranslate">extension</span> (como para <span class="notranslate">Android</span>), então você precisa se certificar de que ele <em>não</em> seja exportado para nenhuma plataforma não compatível (como <span class="notranslate">iOS</span>, consoles, etc.).</p>
  <h2>Arquivos de espaço reservado</h2>
  <p>Para adicionar um arquivo ao novo <span class="notranslate">extension</span> você precisa clicar no ícone do menu <img> e selecionar um arquivo de espaço reservado (&quot;Add Placeholder&quot;) ou importar o arquivo real que é necessário para a plataforma alvo (&quot;Add File&quot;):</p>
  <p class="dropspot"><img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png" /></p>
  <p>Um arquivo &quot;genérico&quot; é um arquivo que pode ser de qualquer tipo, exceto aqueles exigidos pelas plataformas específicas (por exemplo, arquivos <span class="inline">DLL</span> ou <span class="inline">SO </span>), e não será usado exceto como um arquivo &quot;linker&quot; para conectar um conjunto de funções ou constantes com o dado <span class="notranslate">extension</span> (geralmente é apenas para uso com <span class="notranslate">iOS</span> e <span class="notranslate">Android</span> <span class="notranslate">extensions</span>, que é explicado nas seções abaixo para esses alvos). Você também pode adicionar arquivos &quot;GML&quot; e &quot;JS&quot; para uso mais específico.</p>
  <h2>Acréscimo de arquivos</h2>
  <p>Normalmente você não precisará usar placeholders a menos que você esteja construindo para <span class="notranslate">iOS</span> e <span class="notranslate">Android</span>, então você escolheria a opção &quot;Add File&quot; para adicionar qualquer um dos seguintes arquivos, dependendo da plataforma para a qual eles são destinados:</p>
  <ul class="colour">
    <li class="dropspot"><span class="inline">.gml</span>: Este é um arquivo feito somente com o <span class="notranslate">GameMaker Language</span> e é compatível com todas as plataformas.</li>
    <li class="dropspot"><span class="inline">.js</span>: Este é um formato JavaScript <span class="notranslate">extension</span> e só é compatível com o alvo HTML5.</li>
    <li class="dropspot"><span class="inline">.dll</span>: Esta é uma biblioteca de link dinâmico no formato <span class="notranslate">extension</span> e só é compatível com os alvos <span class="notranslate">Windows</span>, UWP e Xbox (cada alvo precisará de um arquivo <span class="inline">*.dll</span> diferente compatível com suas especificações).</li>
    <li class="dropspot"><span class="inline">.dylib</span>: Este é o equivalente Mac de uma DLL e só é compatível com o alvo Mac (não <span class="notranslate">iOS</span>).</li>
    <li class="dropspot"><span class="inline">.so</span>: Este é o equivalente a <span class="notranslate">Linux</span> de uma DLL e só é compatível com o objetivo <span class="notranslate">Ubuntu</span> (<span class="notranslate">Linux</span>).</li>
    <li class="dropspot"><span class="inline">.prx</span>: Este é um formato de arquivo para adicionar funcionalidade ao alvo PlayStation (cada alvo precisará de um arquivo <span class="inline">*.prx</span> diferente compatível com suas especificações).</li>
  </ul>
  <p>Você notará que não há nenhum tipo de arquivo para <strong>Android </strong>ou <strong>iOS</strong>, o que é porque sua configuração é ligeiramente diferente. Mais abaixo você pode encontrar explicações sobre como configurá-los, mas primeiro vamos olhar para criar um <span class="notranslate">GML</span> <span class="notranslate">extension</span> geral para qualquer uma das plataformas alvo, uma vez que o processo é o mesmo para todas elas.</p>
  <h2>Criando uma extensão <span class="notranslate">GML</span> </h2>
  <p>Para começar, você precisa criar o arquivo que vai ser utilizado. Para um <span class="notranslate">GML</span> <span class="notranslate">extension</span>, este seria um arquivo de texto (salvo com o <span class="inline">.gml</span> <span class="notranslate">extension</span>) e seria formatado algo como isto:</p>
  <p class="code">#define c_alice_blue<br />
    return make_color_rgb(240,248,255);<br />
    <br />
    <br />
    #define instance_create_colour<br />
    var i = instance_create_layer(argument0, argument1, argument2, argument3);<br />
    with (i)<br />
    {<br />
        image_blend = argument3;<br />
    }<br />
    return i;
  </p>
  <p>Como você pode ver, começamos cada seção com uma chamada <span class="inline">#define</span>, que no exemplo acima é usada para definir duas funções. Vejamos cada parte de uma função definida:</p>
  <ul class="colour">
    <li>A declaração <span class="inline">#define</span> é utilizada para definir uma nova função com o nome dado;</li>
    <li>Essa declaração é então seguida pelo código da função, que usa as variáveis <span class="inline">argument0</span>, <span class="inline">argument1</span>, etc. para acessar os argumentos passados para a função quando ela é chamada;</li>
    <li>No final, temos um <a href="../../GameMaker_Language/GML_Overview/Language_Features/return.htm"><span class="notranslate">return</span></a> declaração que é usada para retornar dados do <span class="notranslate">extension</span> de volta ao código <span class="notranslate">GML</span> onde a função foi chamada.</li>
  </ul>
  <p>Se você estivesse escrevendo um <span class="inline">DLL</span> ou JavaScript <span class="notranslate">extension</span>, então o processo seria semelhante, mas na linguagem correta para o formato de arquivo da extensão.</p>
  <p>Uma vez feito isso, você precisa adicionar o arquivo ao <span class="notranslate">extension</span> (usando a opção &quot;Add File&quot;) que irá encadear uma nova janela para as propriedades do <span class="notranslate">Extensions</span> Propriedades para as propriedades do arquivo:</p>
  <p class="dropspot"><img alt="Extension Properties" class="center" height="519" src="../../assets/Images/Asset_Editors/Editor_Extensions.png" width="486" /></p>
  <p>Aqui você selecionaria a plataforma alvo para o <span class="notranslate">extension</span> (para GML você selecionaria todas elas), bem como renomearia o arquivo <span class="notranslate">extension</span> e definiria alguns outros detalhes, que cobriremos dentro de momentos.</p>
  <p class="note"><strong>NOTA</strong>: Acrescentar um arquivo a um <span class="notranslate">extension</span> copia-o para o diretório do projeto, o que significa que qualquer outra alteração deve ser feita a essa cópia para que ela fique visível no jogo. Você pode encontrar a cópia clicando com o botão direito do mouse em seu <span class="notranslate">extension</span> no navegador <span class="notranslate">Asset</span> e selecionando &quot;Abrir no Explorer&quot;.</p>
  <h2>Adicionando funções</h2>
  <p>O editor deve ser preenchido automaticamente com as funções incluídas em nosso arquivo <span class="notranslate">GML</span>, mas se não for, você pode adicioná-las manualmente clicando no botão de menu de funções <img> e selecionando o que você deseja:</p>
  <p class="dropspot"><img alt="Estension Options Icon" class="icon" src="../../assets/Images/Icons/Icon_ExtensionMenu.png" /></p>
  <p>Ao selecionar &quot;Adicionar Função&quot; você poderá adicionar uma função ao <span class="notranslate">extension</span> que poderá ser chamada no <span data-keyref="GameMaker Name">GameMaker</span> da mesma forma que qualquer uma das funções embutidas. <span>Uma vez que a função tenha sido adicionada, a seguinte janela se abrirá para você definir as propriedades da função (ou você pode clicar duas vezes sobre a função para abri-la):</span></p>
  <p class="dropspot"><img alt="Add Files To An Extension" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_Files.png" /></p>
  <p>Na imagem acima, preenchemos o editor de funções com os detalhes da função <span class="inline">instance_create_colour()</span> que definimos em nosso arquivo <span class="notranslate">GML</span> <span class="notranslate">extension</span> (note que esta janela do editor de funções não é apenas para definir funções <span class="notranslate">GML</span> -- ela será a mesma em todos os tipos <span class="notranslate">extension</span> ). Vamos analisar cada opção que pode ser definida para uma função:</p>
  <ul class="colour">
    <li>Você pode ver que demos à função um <em>Nome</em>, que é o que você usaria ao chamar a função em seu projeto; note que este nome não precisa corresponder ao usado no <span class="notranslate">extension</span> -- você pode nomeá-lo como quiser e depois usar o campo <em>Nome Externo</em> para vinculá-lo ao nome real definido na extensão:<img></li>
    <li>Abaixo, você tem uma seção para definir o texto de <em>ajuda </em>, que é o texto que será mostrado no pop-up de conclusão de código e o texto de ajuda na parte inferior do editor de código.</li>
    <li>A seguir você pode definir o <em>Tipo de Retorno</em>, que pode ser um <strong>duplo </strong>(valor de <a class="glossterm" data-glossterm="ponto flutuante" href="#">ponto flutuante</a> do número real) ou uma <strong>cadeia</strong>; se não houver nada retornado pela função externa, então isso não importa.</li>
    <li>Sob isso você define os argumentos que a função terá. Estes argumentos podem ser <strong>duplos </strong>ou <strong>cordões</strong>, e você pode adicioná-los clicando no botão adicionar <img> e removê-los clicando no botão remover <img>.<br>
      <br>
      Se sua função pode aceitar uma quantidade variável de argumentos (o que significa que tem alguns argumentos opcionais), você deve verificar a caixa de seleção &quot;Argumentos de Comprimento Variável&quot; na parte inferior.
    </li>
  </ul>
  <p class="note"><strong>NOTA</strong>: Se a função for parte de um nativo <span class="notranslate">extension</span> para <span class="notranslate">Windows</span>, Mac ou <span class="notranslate">Ubuntu</span> (<span class="inline">dll</span>, <span class="inline">dylib</span> ou <span class="inline">so</span> respectivamente) e tiver mais de quatro argumentos, <strong>todos os argumentos devem ser do mesmo tipo</strong>.</p>
  <p>Uma vez feito tudo isso, a função está pronta para ser usada no projeto; agora ela aparecerá em auto-completada e também será codificada por cores:</p>
  <p><img>As funções definidas também podem ser definidas como <strong>Init Functions</strong> ou <strong>Final Functions</strong>, o que significa que serão chamadas automaticamente quando o jogo começar (Init) e quando o jogo terminar (Final).</p>
  <p class="note"><strong>IMPORTANTE!</strong> Todas as plataformas suportam a chamada de função Init, <strong>mas nem todas as plataformas realizarão a chamada de função Final</strong>. Isto porque certas plataformas simplesmente fecharão o aplicativo sem dar qualquer aviso ou tempo para que esta função seja chamada. As plataformas mais afetadas por isto são <strong>iOS</strong>, <strong>Android</strong>, <strong>HTML5</strong>, <strong>PlayStation </strong>e <strong>Xbox</strong>.</p>
  <h2>Macros</h2>
  <p>A outra opção que você tem é criar uma <strong>Macro</strong>. Uma macro pode ser ou um valor <a class="glossterm" data-glossterm="constante" href="#">constante</a> ou um pequeno trecho de código (para mais informações sobre macros, veja <a href="../../GameMaker_Language/GML_Overview/Variables/Constants.htm">aqui</a>). Por exemplo, poderíamos remover a função <span class="inline">c_alice_blue</span> de nossa extensão previamente definida <span class="notranslate">GML</span> e torná-la uma macro em seu lugar. Para criar uma macro, você pode simplesmente clicar no botão &quot;Macros&quot; nas propriedades <span class="notranslate">Extension</span>, que abrirá a seguinte janela:</p>
  <p class="dropspot"><img alt="File Property Window" class="center" height="553" src="../../assets/Images/Asset_Editors/Editor_Extensions_FileProperties.png" width="1050" /></p>
  <p>O editor aqui é praticamente auto-explicativo: você dá o nome da macro e seu valor constante, ou uma pequena linha de código. Note que se a macro é uma linha de código, <strong>ela será avaliada toda vez que a macro for chamada</strong>.</p>
  <h2 id="h1">Criando <span class="notranslate">Extension</span> Opções</h2>
  <p>Clique no ícone da engrenagem ao lado de &quot;<strong>Opções de Extensão</strong>&quot; para criar ou modificar as opções para suas extensões:</p>
  <p><img>Após clicar em &quot;<strong>Sim</strong>&quot; no prompt de confirmação, você verá uma nova janela, onde você pode adicionar novas opções <span class="notranslate">extension</span>:</p>
  <p><img>Você pode dar a cada opção <span class="notranslate">extension</span> um nome, um valor padrão e um tipo de dado. O nome é o que você usaria internamente em seu código <span class="notranslate">extension</span> para recuperar o valor da opção.</p>
  <p>Além de adicionar opções usando &quot;Adicionar Opção&quot; você também pode adicionar seções usando &quot;Adicionar Seção&quot;. Uma seção <strong>não</strong> é uma opção, mas apenas um cabeçalho exibido na janela principal do editor <span class="notranslate">Extension</span>. Use isto se você tiver muitas opções e quiser limpar a lista de opções que o usuário final vê.</p>
  <p>Os seguintes tipos de opções podem ser criados:</p>
  <ul class="colour">
    <li><strong>Booleano</strong>: Isto cria uma caixa de seleção verdadeiro/falso.</li>
    <li><strong>Número</strong>: Este é um número real.</li>
    <li><strong>Cordão</strong>: Este é um texto <span class="notranslate">string</span>.</li>
    <li><strong>FilePath</strong>: Este é um <span class="notranslate">path</span> para um arquivo. Ele permite que você use o explorador de seu SO para procurar por um arquivo.</li>
    <li><strong>FolderPath</strong>: Este é um <span class="notranslate">path</span> para uma pasta/diretório. Ele permite que você use o explorador de seu SO para procurar por uma pasta.</li>
    <li><strong>Lista</strong>: Esta é uma lista suspensa da qual um único item pode ser selecionado a partir de uma lista de itens pré-definida.</li>
  </ul>
  <p>Você também pode clicar no ícone <img> ao lado de uma opção para dar-lhe um <strong>Nome</strong> e <strong>Descrição</strong> de <strong>Exibição</strong> opcional (que aparece como uma dica de ferramenta ao pairar sobre o Nome de Exibição).</p>
  <p>Na janela extras, você também pode optar por exportar esta opção para o arquivo <strong>opcionais.ini</strong> junto com seu jogo.</p>
  <p>Finalmente você pode optar por ocultar a opção do editor, tornando-a invisível para o usuário final que usa o <span class="notranslate">extension</span>.</p>
  <h3>Usando <span class="notranslate">Extension</span> Opções</h3>
  <p>Você pode recuperar os valores das opções de uma extensão em <span class="notranslate">runtime</span> usando as <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Extensions/Extensions.htm">Funções de Extensão</a>.</p>
  <p>Você também pode recuperar suas opções <span class="notranslate">extension</span> em seu <a data-xref="{title}" href="../../Settings/Runner_Details/Compiler_Batch_Files.htm">Compiler Batch Files / Scripts</a>, usando o nome <span class="inline2">YYEXTOPT_&lt;ExtensionName&gt;__OptionName&gt;.</span></p>
  <p>As opções de extensão só estarão disponíveis em <span class="notranslate">runtime</span> se o <span class="notranslate">extension</span> tiver funções que são utilizadas em <span class="notranslate">runtime</span>. No entanto, as opções serão sempre exportadas para o arquivo INI (se a opção estiver habilitada) e o lote <span class="notranslate">scripts</span> independentemente do uso da extensão.</p>
  <h2>Arquivos de Proxy</h2>
  <p>Ao trabalhar com múltiplas plataformas alvo, vale a pena notar que você pode criar um único <span class="notranslate">extension</span> com apenas um conjunto de funções/macros que funcionará em <em>todas as </em>plataformas. Isto é conseguido adicionando apenas uma das bibliotecas de links ao seu jogo como um <span class="notranslate">extension</span> e colocando a(s) outra(s) na lista de <strong>Arquivos de Proxy</strong> na janela <strong>Propriedades de Extensão</strong>.</p>
  <p><img>Por exemplo, digamos que você tenha um <span class="notranslate">Windows</span> <span class="notranslate">extension</span> com o <span class="inline"> <strong>dll </strong></span>&quot;<span class="inline">Haggis.dll</span>&quot;. Você simplesmente replicaria este <span class="inline"> <strong>dll</strong></span> como um Mac <span class="inline"> <strong>DyLib</strong></span>, nomeando-o &quot;<span class="inline"><strong>libHaggis.dylib</strong></span>&quot; e certificando-se de que os nomes das funções internas correspondem aos do original <span class="notranslate">Windows</span> <span class="inline"> <strong>dll</strong></span>. Este <strong> <span class="inline">DyLib</span> </strong>seria então adicionado aos Arquivos Proxy e configurado para exportar quando o jogo for executado no alvo Mac, e o <span data-keyref="GameMaker Name">GameMaker</span> o utilizará automaticamente quando as funções <span class="notranslate">extension</span> forem chamadas.</p>
  <p>Para adicionar um arquivo proxy, você pode simplesmente clicar no botão <img> na janela Propriedades do arquivo de recurso selecionado e navegar até o local do arquivo. Uma vez adicionado, você pode precisar atualizar os alvos da extensão para adicionar o módulo apropriado, e quando você executar seu próximo jogo, ele será incluído como um proxy para aquela plataforma. Você também pode remover arquivos proxy clicando no botão <img> que removerá o arquivo proxy selecionado.</p>
  <p>Uma vez que você tenha adicionado seus arquivos proxy, eles serão copiados para a pasta <span class="notranslate">Extensions</span> de seu projeto (você pode encontrá-los clicando com o botão direito do mouse <img> no <span class="notranslate">extension</span> e selecionando <em>Abrir no Explorer</em>), portanto, se você precisar editá-los, você deve editar os arquivos copiados que estão empacotados com o jogo e não o arquivo fonte que foi importado, pois o <span data-keyref="GameMaker Name">GameMaker</span> estará usando os que estão no projeto para compilação.</p>
  <h2 id="h">Convenções de Nomeação</h2>
  <p>É muito importante que seus arquivos proxy sigam as convenções de nomes listadas abaixo, pois <span data-keyref="GameMaker Name">o GameMaker</span> analisará esses nomes e atribuirá o módulo alvo para o arquivo de acordo com seu <span class="notranslate">extension</span> e nome e ligará automaticamente os arquivos para você. Se você não seguir estas convenções, seu jogo pode não funcionar em <span class="notranslate">runtime</span>, já que o <span data-keyref="GameMaker Name">GameMaker</span> não será capaz de determinar qual arquivo utilizar para que ele não carregue o arquivo corretamente.</p>
  <p>As convenções de nomenclatura para cada plataforma alvo são dadas abaixo:</p>
  <table>
    <colgroup>
      <col style="width: 173px;" />
      <col style="width: 715px;" />
    </colgroup>
    <tbody>
      <tr>
        <th>Plataforma</th>
        <th>Nomes</th>
      </tr>
      <tr>
        <td>Windows 32bit Tempo de execução</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.dll, lib&lt;<em>Name</em>&gt;.dll</span></td>
      </tr>
      <tr>
        <td>Windows 64bit Tempo de execução</td>
        <td><span class="inline">&lt;<em>N</em><em>ame</em>&gt;_x64.dll, lib&lt;<em>Name</em>&gt;_x64.dll</span></td>
      </tr>
      <tr>
        <td>UWP</td>
        <td><span class="inline"><span class="inline">&lt;<em>Name</em>&gt;.dll, &lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_win8_x86.dll, &lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_win8_arm.dll, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_win8_x86.dll, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_win8_arm.dll</td>
      </tr>
      <tr>
        <td>Ubuntu (<span class="notranslate">Linux</span>)</td>
        <td><span class="inline">&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;.so,<br>
            &lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_linux.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_linux.so,<br>
            <br>
            &lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_arm.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_arm.so,<br>
            <span class="inline">lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_linux_arm.so,<br>
            <br>
            &lt;<em>Nome&gt;_arm64</em>.so, lib&lt;<em>Nome&gt;_arm64</em>.so, lib&lt;<em>Nome&gt;_linux_arm64</em>.so,<br>
            <br>
            &lt;<em>Nome&gt;_arm64-v8</em>.so,<br>
            lib&lt;<em>Nome&gt;_arm64-v8</em>.so, lib&lt;Nome&gt;_linux_arm64-v8.so,<br>
            <br>
            &lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_armeabi-v7a.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_armeabi-v7a.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_linux_armeabi-v7a.so</td>
      </tr>
      <tr>
        <td>macOS</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.dylib, lib&lt;Name&gt;.dylib</span></td>
      </tr>
      <tr>
        <td>HTML5</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.js</span></td>
      </tr>
      <tr>
        <td>PS4</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.prx, lib&lt;<em>Name</em>&gt;.prx, &lt;<em>Name</em>&gt;_ps4.prx, lib&lt;<em>Name</em>&gt;_ps4.prx</span></td>
      </tr>
      <tr>
        <td>PS5</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.prx, lib&lt;<em>Name</em>&gt;.prx, &lt;<em>Name</em>&gt;_ps5.prx, lib&lt;<em>Name</em>&gt;_ps5.prx</span></td>
      </tr>
      <tr>
        <td>Xbox One</td>
        <td><span class="inline"><span class="inline">&lt;<em>Name</em>&gt;.dll, </span>&lt;<em>Nome&gt;_xboxone</em>.dll</td>
      </tr>
      <tr>
        <td>Série Xbox X|S</td>
        <td><span class="inline"><span class="inline">&lt;<em>Name</em>&gt;.dll, </span>&lt;<em>Nome&gt;_xboxseriesxs</em>.dll</td>
      </tr>
    </tbody>
  </table>
  <p>Usando as convenções acima, você trocaria a parte <span class="inline">&lt;<em>Name</em>&gt;</span> pelo nome do arquivo base para o qual você está adicionando os arquivos proxy.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="../Extensions.htm">O Editor <span class="notranslate">Extension</span> </a></div>
        <div style="float:right">A seguir: <a href="Android_Extensions.htm">Extensões do Android</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
Creating Extensions
-->
  <!-- TAGS
extensions_create
-->
</body>
</html>