<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>gpu_set_zwriteenable</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference for the function gpu_set_zwriteenable" />
  <meta name="rh-index-keywords" content="gpu_set_zwriteenable" />
  <meta name="search-keywords" content="gpu_set_zwriteenable" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>gpu_set_zwriteenable</h1>
  <p>Esta função pode ser usada para ativar (<span class="inline">true</span>) e desativar (<span class="inline">false</span>) o pedido de profundidade usando o z-buffer. Quando uma instância é renderizada no <span data-keyref="GameMaker Name">GameMaker</span>, a profundidade de um pixel gerado (sua coordenada z) é armazenada no z-buffer, então, se outra instância da cena deve ser renderizada no mesmo pixel, as duas profundidades são comparadas (z-testing - veja <a href="gpu_set_ztestenable.htm"><span class="inline">gpu_set_ztestenable()</span></a>) e aquele &quot;mais próximo&quot; do observador é então salvo no z-buffer, substituindo o antigo. Entretanto, isto nem sempre é o que você deseja que aconteça e há momentos em que você pode querer que algo seja arrastado sobre tudo o resto, não importa qual seja seu valor z. Nesses casos, você pode usar esta função para <span class="notranslate">switch</span>, escrevendo para o z-buffer e assim forçar o que estiver sendo desenhado a ser desenhado sobre tudo o resto. Note que a descrição dada aqui é para o modo de comparação <i>padrão</i> do teste z, mas isso pode ser alterado</p>
  <p>O valor padrão é que o z-buffering está ativado (<span class="inline">true</span>).</p>
  <p> </p>
  <h4>Sintaxe:</h4>
  <p class="code">gpu_set_zwriteenable(enable);</p>
  <table>
    <tbody>
      <tr>
        <th>Argumento</th><th>Tipo</th>
        <th>Descrição</th>
     </tr>
      <tr>
        <td><span class="notranslate">enable</span></td><td><span data-keyref="Type_Bool"></span></td>
        <td><span class="notranslate">The comparison mode to use (see list above)</span></td>
     </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Devoluções:</h4>
  <p class="code"><span data-keyref="Type_Void"></span></p>
  <p> </p>
  <h4>Exemplo:</h4>
  <p class="code">gpu_set_zwriteenable(false);<br />
    with (obj_Menu_Containers)<br />
    {<br />
        draw_self();<br />
    }<br />
    gpu_set_zwriteenable(true);</p>
  <p>O código acima desliga a escrita em z-buffer, desenha um número de <span class="notranslate">objects</span>, e depois volta a ligá-lo para continuar o desenho.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="GPU_Control.htm">Controle de GPU</a></div>
        <div style="float:right">A seguir: <a href="gpu_set_fog.htm"><span class="notranslate">gpu_set_fog</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
gpu_set_zwriteenable
-->
  <!-- TAGS
gpu_set_zwriteenable
-->
</body>
</html>