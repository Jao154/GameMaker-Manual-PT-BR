<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>Funções do Script vs. Métodos</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../assets/css/default.css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="template" content="../../assets/masterpages/Manual_Page.htt" />
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page explaining practical differences between Script Functions and Methods." />
  <meta name="rh-index-keywords" content="Script Functions vs. Methods" />
  <meta name="search-keywords" content="calling methods, calling script functions, method performance" />
</head>
<body>
  <h1>Funções do Script vs. Métodos</h1>
  <p>Esta página cobre informações essenciais sobre o uso das funções <span class="notranslate">script</span> versus métodos.</p>
  <h2>Diferença básica</h2>
  <p>Uma <a href="Script_Functions.htm">função de roteiro</a> é criada com esta sintaxe:</p>
  <p class="code">function name()<br />
    {<br />
        code;<br />
    }</p>
  <p>Uma <a href="Method_Variables.htm">variável de método</a> é criada com esta sintaxe:</p>
  <p class="code">name = function()<br />
    {<br />
        code;<br />
    }</p>
  <p>Você deve usar a primeira sintaxe em <span class="notranslate">scripts</span>, para criar funções globais que podem ser chamadas a partir de qualquer escopo em seu jogo.</p>
  <p>Você deve usar a segunda sintaxe ao criar funções em <a href="Structs.htm">estruturas/construtores</a> e <span class="notranslate">objects</span>. Esta sintaxe cria uma variável contendo um método.</p>
  <h2>Chamadas diretas</h2>
  <p>Você pode chamar as funções e métodos <span class="notranslate">script</span> diretamente usando parênteses <span class="inline2">()</span>, assim como uma <a href="Runtime_Functions.htm">função de tempo de execução</a>:</p>
  <p class="code">// Create the function<br />
    function reset_x()<br />
    {<br />
        x = xstart;<br />
    }<br />
    <br />
    // Call the function<br />
    reset_x();
  </p>
  <p>Você também pode usar a função <a href="../GML_Reference/Asset_Management/Scripts/script_execute.htm"><span class="inline">script_execute()</span></a> para executar uma função <span class="notranslate">script</span>, embora agora seja uma função herdada e não recomendada para uso.</p>
  <h2>Chamadas indiretas: Métodos</h2>
  <p>Você pode armazenar uma referência a um método, em outra variável, para chamá-lo mais tarde através dessa variável diferente:</p>
  <p class="code">// Create method<br />
    reset_alpha = function()<br />
    {<br />
        image_alpha = 1;<br />
    }<br />
    <br />
    // Pass reference and call<br />
    temp_1 = reset_alpha;<br />
    temp_1();
  </p>
  <p class="note"><span class="note">OBSERVAÇÃO</span> Veja como o código não coloca <span class="inline2">()</span> após <span class="inline2">reset_alpha</span>. Isso é porque estamos lendo a referência do método e não o chamamos de referência.</p>
  <p>Neste exemplo, a chamada <span class="inline2">temp_1</span> chamará <span class="inline2">reset_alpha</span>, pois armazena uma referência a esse <strong>método</strong>.</p>
  <p>Você está completamente bem para passar uma referência de método desta maneira. No entanto, ao utilizar as funções <span class="notranslate">script</span>, há uma advertência.</p>
  <h2>Chamadas indiretas: <span class="notranslate">Script</span> Funções</h2>
  <p>Você também pode armazenar uma referência a uma função <span class="notranslate">script</span>, em outra variável:</p>
  <p class="code">// Create function<br />
    function reset_x()<br />
    {<br />
        x = xstart;<br />
    }<br />
    <br />
    // Store reference<br />
    temp_1 = reset_x;
  </p>
  <p>Agora, você pode chamar <span class="inline2">temp_1</span> ao fazer isso:</p>
  <p class="code">temp_1();</p>
  <p>Entretanto, como esta variável se refere a uma <strong>função de script</strong>, primeiro ela tem que convertê-la em um <strong>método</strong>, e depois chamá-la assim.</p>
  <p>Isto pode facilmente resultar no aumento do uso de memória, especialmente se você estiver chamando cada quadro, porque o motor agora tem que criar um novo método cada quadro para esta chamada. </p>
  <p>Então, qual é a solução?</p>
  <ul class="colour">
    <li>Use <a href="../GML_Reference/Asset_Management/Scripts/script_execute.htm"><span class="inline">script_execute()</span></a> para chamar a função <span class="notranslate">script</span> através de sua referência, o que não criará um método.</li>
    <li>Ou, a melhor solução: converta sua função <span class="notranslate">script</span> <a href="../GML_Reference/Variable_Functions/method.htm">em um método</a> ao passar sua referência.</li>
  </ul>
  <p>Para implementar a segunda solução, seu código ficaria assim:</p>
  <p class="code">temp_1 = method(undefined, reset_x);</p>
  <p>Isto está criando um novo método a partir da função <span class="inline2">reset_x</span> script, usando <a href="../GML_Reference/Variable_Functions/method.htm"><span class="inline">method()</span></a>.</p>
  <p>Chamando <span class="inline2">temp_1()</span> agora usando parênteses não vai aumentar o uso de memória, pois o método já está criado para você.</p>
  <p>Novamente, isto só se aplica se você estiver chamando uma função <span class="notranslate">script</span> <strong>indiretamente</strong>, através de uma referência armazenada em uma variável. Chamá-la diretamente não causa tais problemas.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Voltar: <a data-xref="{title}" href="GML_Overview.htm">Visão geral do Código GML</a></div>
        <div>A seguir: <a data-xref="{title}" href="Functions/Static_Variables.htm">Variáveis estáticas</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
Script Functions vs. Methods
-->
  <!-- TAGS
script_functions_vs_methods
-->
</body>
</html>